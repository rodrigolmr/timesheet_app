plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
    id "com.google.gms.google-services"
}

import java.util.Properties

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader("UTF-8") { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode') ?: '1'
def flutterVersionName = localProperties.getProperty('flutter.versionName') ?: '1.0.0'

android {
    namespace = "com.centralislandfloors.timesheetApp.android"
    compileSdk = 35

    defaultConfig {
        applicationId = "com.centralislandfloors.timesheetApp.android"
        minSdk = 23
        targetSdk = 35
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    signingConfigs {
        release {
            storeFile file("upload-keystore.jks")   // caminho do keystore
            storePassword "112358"                  // senha do keystore
            keyAlias "minha_chave"                  // alias definido no keytool
            keyPassword "112358"                    // senha da chave
        }
    }

    buildTypes {
        debug {
            shrinkResources false
            minifyEnabled false
        }
        release {
            signingConfig signingConfigs.release
            shrinkResources false
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = "17"
    }
    
    // Renomeia internamente o APK para cada variante (debug, release e profile)
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def newApkName = "TimesheetApp-${variant.versionName}-${variant.buildType.name}.apk"
            outputFileName = newApkName
            println "APK renamed internally to: $newApkName"
        }
    }
}

flutter {
    source = "../.."
}

dependencies {
    implementation "androidx.core:core-ktx:1.12.0"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation platform("com.google.firebase:firebase-bom:33.8.0")
    implementation "com.google.firebase:firebase-auth"
    implementation "com.google.firebase:firebase-firestore"
}

// Tarefa customizada para copiar o APK final para um diretório externo com o nome desejado
task copyApk(type: Copy) {
    // Diretório onde o Flutter coloca o APK final (com o nome alterado internamente)
    def apkDir = file("${buildDir}/outputs/flutter-apk/")
    from apkDir
    // Inclui todos os arquivos que correspondam ao padrão "-release.apk"
    include "*-release.apk"
    // Define o diretório de destino. Aqui usamos uma pasta "custom_apks" na raiz do projeto.
    into file("${rootDir}/custom_apks")
    // Renomeia o arquivo copiado para garantir o nome desejado
    rename { String fileName ->
         "TimesheetApp-${flutterVersionName}-release.apk"
    }
    doLast {
         println "APK copied to ${rootDir}/custom_apks/TimesheetApp-${flutterVersionName}-release.apk"
    }
}

// Após a avaliação do projeto, garanta que a tarefa copyApk seja executada ao final do assembleRelease.
afterEvaluate {
    def releaseTask = tasks.findByName("assembleRelease")
    if (releaseTask != null) {
         releaseTask.finalizedBy(copyApk)
         println "assembleRelease finalized by copyApk."
    } else {
         println "assembleRelease task not found."
    }
}
