// File generated by FlutterFire CLI.
// ignore_for_file: type=lint
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        return macos;
      case TargetPlatform.windows:
        return windows;
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static const FirebaseOptions web = FirebaseOptions(
    apiKey: 'AIzaSyCrab3K5FsSvwZRtZGPew-aTm7LgnZAkpQ',
    appId: '1:588817090632:web:e2c87654ebd6906478707d',
    messagingSenderId: '588817090632',
    projectId: 'timesheet-app-d9700',
    authDomain: 'timesheet-app-d9700.firebaseapp.com',
    storageBucket: 'timesheet-app-d9700.firebasestorage.app',
  );

  static const FirebaseOptions android = FirebaseOptions(
    apiKey: 'AIzaSyDbsfLPstV6iA3y1-oc34QUyBSdc9riqnA',
    appId: '1:588817090632:android:4ec8657ebc48122178707d',
    messagingSenderId: '588817090632',
    projectId: 'timesheet-app-d9700',
    storageBucket: 'timesheet-app-d9700.firebasestorage.app',
  );

  static const FirebaseOptions ios = FirebaseOptions(
    apiKey: 'AIzaSyDNn5llSC7u1Hlq73t-G244TBYKUfcfxkY',
    appId: '1:588817090632:ios:c920eabff716863678707d',
    messagingSenderId: '588817090632',
    projectId: 'timesheet-app-d9700',
    storageBucket: 'timesheet-app-d9700.firebasestorage.app',
    iosBundleId: 'com.centralislandfloors.timesheetApp',
  );

  static const FirebaseOptions macos = FirebaseOptions(
    apiKey: 'AIzaSyDNn5llSC7u1Hlq73t-G244TBYKUfcfxkY',
    appId: '1:588817090632:ios:0fcfba70b3c17d2678707d',
    messagingSenderId: '588817090632',
    projectId: 'timesheet-app-d9700',
    storageBucket: 'timesheet-app-d9700.firebasestorage.app',
    iosBundleId: 'com.centralislandfloors.timesheetApp.mac',
  );

  static const FirebaseOptions windows = FirebaseOptions(
    apiKey: 'AIzaSyCrab3K5FsSvwZRtZGPew-aTm7LgnZAkpQ',
    appId: '1:588817090632:web:61e4712990c9bb0f78707d',
    messagingSenderId: '588817090632',
    projectId: 'timesheet-app-d9700',
    authDomain: 'timesheet-app-d9700.firebaseapp.com',
    storageBucket: 'timesheet-app-d9700.firebasestorage.app',
  );

}// lib/models/timesheet_data.dart

class TimesheetData {
  // Campos de NewTimeSheet
  String jobName;
  String date;
  String tm; // Territorial Manager
  String jobSize;
  String material;
  String jobDesc;
  String foreman;
  String vehicle;

  // Novo campo
  String notes;

  // Lista de workers
  List<Map<String, String>> workers;

  TimesheetData({
    this.jobName = '',
    this.date = '',
    this.tm = '',
    this.jobSize = '',
    this.material = '',
    this.jobDesc = '',
    this.foreman = '',
    this.vehicle = '',
    this.notes = '', // <-- Novo
    List<Map<String, String>>? workers,
  }) : workers = workers ?? [];
}
// lib/screens/cards_screen.dart

import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import '../widgets/base_layout.dart';
import '../widgets/title_box.dart';
import '../widgets/custom_button.dart';
import '../widgets/custom_input_field.dart';
import '../widgets/custom_button_mini.dart';

class CardsScreen extends StatefulWidget {
  const CardsScreen({Key? key}) : super(key: key);

  @override
  State<CardsScreen> createState() => _CardsScreenState();
}

class _CardsScreenState extends State<CardsScreen> {
  bool _showForm = false;
  final TextEditingController _cardholderNameController =
      TextEditingController();
  final TextEditingController _last4DigitsController = TextEditingController();

  String _statusFilter = "all"; // "all", "active", "inactive"

  void _handleAddCard() {
    setState(() {
      _showForm = true;
    });
  }

  void _handleCancel() {
    setState(() {
      _showForm = false;
      _cardholderNameController.clear();
      _last4DigitsController.clear();
    });
  }

  /// Salva o novo cartão no Firestore
  Future<void> _handleSave() async {
    final cardholderName = _cardholderNameController.text.trim();
    final last4Digits = _last4DigitsController.text.trim();

    if (cardholderName.isEmpty || last4Digits.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('Please fill in all fields before saving.'),
        ),
      );
      return;
    }

    try {
      final docRef = FirebaseFirestore.instance.collection('cards').doc();
      await docRef.set({
        'uniqueId': docRef.id,
        'cardholderName': cardholderName,
        'last4Digits': last4Digits,
        'status': 'ativo', // status padrão
        'createdAt': FieldValue.serverTimestamp(),
      });

      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Card saved successfully!')),
      );

      setState(() {
        _showForm = false;
        _cardholderNameController.clear();
        _last4DigitsController.clear();
      });
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error saving card: $e')),
      );
    }
  }

  /// Abre o diálogo para mudar status (ativo/inativo)
  void _showStatusDialog(
    String docId,
    String cardholderName,
    String last4Digits,
    String currentStatus,
  ) {
    String newStatus = currentStatus;

    showDialog(
      context: context,
      builder: (ctx) {
        return AlertDialog(
          backgroundColor: Colors.white,
          shape: RoundedRectangleBorder(
            side: const BorderSide(color: Color(0xFF0205D3), width: 2),
            borderRadius: BorderRadius.circular(5),
          ),
          content: StatefulBuilder(
            builder: (BuildContext context, StateSetter setDialogState) {
              return Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  Text(
                    "$cardholderName ($last4Digits)",
                    textAlign: TextAlign.center,
                    style: const TextStyle(
                      fontSize: 16,
                      fontWeight: FontWeight.bold,
                      color: Colors.black87,
                    ),
                  ),
                  const SizedBox(height: 10),
                  Container(
                    padding: const EdgeInsets.symmetric(horizontal: 6),
                    decoration: BoxDecoration(
                      color: const Color(0xFFFFFDD0),
                      border: Border.all(
                        color: Color(0xFF0205D3),
                        width: 2,
                      ),
                      borderRadius: BorderRadius.circular(4),
                    ),
                    child: DropdownButtonHideUnderline(
                      child: DropdownButton<String>(
                        value: newStatus,
                        style:
                            const TextStyle(fontSize: 14, color: Colors.black),
                        items: const [
                          DropdownMenuItem<String>(
                            value: 'ativo',
                            child: Text('Active'),
                          ),
                          DropdownMenuItem<String>(
                            value: 'inativo',
                            child: Text('Inactive'),
                          ),
                        ],
                        onChanged: (val) {
                          if (val != null) {
                            setDialogState(() {
                              newStatus = val;
                            });
                          }
                        },
                      ),
                    ),
                  ),
                ],
              );
            },
          ),
          actionsAlignment: MainAxisAlignment.center,
          actions: [
            CustomMiniButton(
              type: MiniButtonType.cancelMiniButton,
              onPressed: () {
                Navigator.pop(context);
              },
            ),
            const SizedBox(width: 10),
            CustomMiniButton(
              type: MiniButtonType.saveMiniButton,
              onPressed: () async {
                try {
                  await FirebaseFirestore.instance
                      .collection('cards')
                      .doc(docId)
                      .update({'status': newStatus});

                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(
                      content: Text('Status updated to "$newStatus"!'),
                    ),
                  );
                } catch (e) {
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(content: Text('Error updating status: $e')),
                  );
                }
                Navigator.pop(context);
              },
            ),
          ],
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return BaseLayout(
      title: "Cards",
      child: SingleChildScrollView(
        padding: const EdgeInsets.symmetric(vertical: 16),
        child: Column(
          children: [
            const TitleBox(title: "Company Cards"),
            const SizedBox(height: 20),

            // Botão Add Card ou formulário
            if (!_showForm)
              CustomButton(
                type: ButtonType.addWorkerButton, // Podemos reaproveitar "Add"
                onPressed: _handleAddCard,
              )
            else
              _buildAddCardForm(),

            const SizedBox(height: 20),

            // Dropdown de status (All, Active, Inactive)
            Align(
              alignment: Alignment.centerRight,
              child: Container(
                margin: const EdgeInsets.only(right: 20),
                height: 40,
                padding: const EdgeInsets.symmetric(horizontal: 6),
                decoration: BoxDecoration(
                  color: Colors.white,
                  border: Border.all(color: const Color(0xFF0205D3), width: 2),
                  borderRadius: BorderRadius.circular(4),
                ),
                child: DropdownButtonHideUnderline(
                  child: DropdownButton<String>(
                    value: _statusFilter,
                    style: const TextStyle(fontSize: 14, color: Colors.black),
                    items: const [
                      DropdownMenuItem(
                        value: 'all',
                        child: Text('All'),
                      ),
                      DropdownMenuItem(
                        value: 'active',
                        child: Text('Active'),
                      ),
                      DropdownMenuItem(
                        value: 'inactive',
                        child: Text('Inactive'),
                      ),
                    ],
                    onChanged: (String? value) {
                      if (value != null) {
                        setState(() {
                          _statusFilter = value;
                        });
                      }
                    },
                  ),
                ),
              ),
            ),
            const SizedBox(height: 20),

            // Exibição da grade de cartões
            StreamBuilder<QuerySnapshot>(
              stream: FirebaseFirestore.instance
                  .collection('cards')
                  .orderBy('createdAt', descending: true)
                  .snapshots(),
              builder: (context, snapshot) {
                if (snapshot.hasError) {
                  return const Text(
                    'Error loading Cards',
                    style: TextStyle(color: Colors.red),
                  );
                }
                if (snapshot.connectionState == ConnectionState.waiting) {
                  return const Center(child: CircularProgressIndicator());
                }

                final docs = snapshot.data?.docs ?? [];
                if (docs.isEmpty) {
                  return const Text('No cards found.');
                }

                // Filtro de status
                List<DocumentSnapshot> filteredDocs = docs;
                if (_statusFilter == 'active') {
                  filteredDocs = docs
                      .where((doc) =>
                          (doc.data() as Map<String, dynamic>)['status'] ==
                          'ativo')
                      .toList();
                } else if (_statusFilter == 'inactive') {
                  filteredDocs = docs
                      .where((doc) =>
                          (doc.data() as Map<String, dynamic>)['status'] ==
                          'inativo')
                      .toList();
                }

                final double containerWidth =
                    MediaQuery.of(context).size.width - 60;

                return Container(
                  width: containerWidth < 0 ? 0 : containerWidth,
                  child: GridView.builder(
                    shrinkWrap: true,
                    physics: const NeverScrollableScrollPhysics(),
                    itemCount: filteredDocs.length,
                    gridDelegate:
                        const SliverGridDelegateWithFixedCrossAxisCount(
                      crossAxisCount: 2,
                      crossAxisSpacing: 12,
                      mainAxisSpacing: 12,
                      childAspectRatio: 2.5,
                    ),
                    itemBuilder: (context, index) {
                      final docData =
                          filteredDocs[index].data() as Map<String, dynamic>;
                      final docId = filteredDocs[index].id;
                      final cardholderName = docData['cardholderName'] ?? '';
                      final last4 = docData['last4Digits'] ?? '';
                      final status = docData['status'] ?? 'ativo';

                      return GestureDetector(
                        onTap: () {
                          _showStatusDialog(
                            docId,
                            cardholderName,
                            last4,
                            status,
                          );
                        },
                        child: Container(
                          decoration: BoxDecoration(
                            color: const Color(0xFFFFFFD0),
                            border: Border.all(
                              color: const Color(0xFF0205D3),
                              width: 2,
                            ),
                            borderRadius: BorderRadius.circular(5),
                          ),
                          child: Center(
                            child: Padding(
                              padding: const EdgeInsets.symmetric(
                                horizontal: 6,
                                vertical: 4,
                              ),
                              child: Text(
                                '$cardholderName\n($last4)',
                                textAlign: TextAlign.center,
                                style: const TextStyle(
                                  fontSize: 14,
                                  fontWeight: FontWeight.w600,
                                ),
                                maxLines: 2,
                                overflow: TextOverflow.ellipsis,
                              ),
                            ),
                          ),
                        ),
                      );
                    },
                  ),
                );
              },
            ),
          ],
        ),
      ),
    );
  }

  /// Formulário para cadastrar o cartão
  Widget _buildAddCardForm() {
    return Column(
      children: [
        CustomInputField(
          label: "Cardholder Name",
          hintText: "Enter cardholder name",
          controller: _cardholderNameController,
        ),
        const SizedBox(height: 10),
        CustomInputField(
          label: "Last 4 digits",
          hintText: "Enter last 4 digits",
          controller: _last4DigitsController,
        ),
        const SizedBox(height: 10),
        Row(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            CustomMiniButton(
              type: MiniButtonType.cancelMiniButton,
              onPressed: _handleCancel,
            ),
            const SizedBox(width: 10),
            CustomMiniButton(
              type: MiniButtonType.saveMiniButton,
              onPressed: _handleSave,
            ),
          ],
        ),
      ],
    );
  }
}
import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_storage/firebase_storage.dart';
import 'package:flutter_pdfview/flutter_pdfview.dart';
import 'package:intl/intl.dart';
import '../widgets/base_layout.dart';
import '../widgets/title_box.dart';
import '../widgets/custom_button.dart';
import '../widgets/custom_button_mini.dart';

class ReceiptViewerScreen extends StatelessWidget {
  final String imageUrl;

  const ReceiptViewerScreen({Key? key, required this.imageUrl})
      : super(key: key);

  @override
  Widget build(BuildContext context) {
    return BaseLayout(
      title: "Timesheet", // ✅ Floating Header sempre "Time Sheet"
      child: Column(
        children: [
          const SizedBox(height: 16),
          const Center(child: TitleBox(title: "Receipt")), // ✅ Título da página
          const SizedBox(height: 20),

          // Exibir informações do Firestore antes do recibo
          Expanded(
            child: FutureBuilder<DocumentSnapshot>(
              future: _getReceiptDetails(imageUrl),
              builder: (context, snapshot) {
                if (snapshot.connectionState == ConnectionState.waiting) {
                  return const Center(child: CircularProgressIndicator());
                }
                if (!snapshot.hasData || !snapshot.data!.exists) {
                  return const Center(child: Text("Receipt not found"));
                }

                final data = snapshot.data!.data() as Map<String, dynamic>;
                final String docId =
                    snapshot.data!.id; // ID do documento Firestore

                return Column(
                  children: [
                    // Exibir informações do recibo
                    _buildInfoRow(
                      "Date:",
                      data["date"] is Timestamp
                          ? DateFormat("M/d/yy, EEEE")
                              .format((data["date"] as Timestamp).toDate())
                          : (data["date"]?.toString() ?? "Not available"),
                    ),
                    _buildInfoRow("Amount:", data["amount"] ?? "Not available"),
                    _buildInfoRow(
                        "Description:", data["description"] ?? "Not available"),

                    const SizedBox(height: 16),

                    // Exibir recibo (imagem ou PDF)
                    Expanded(
                      child: Center(
                        child: imageUrl.endsWith(".pdf")
                            ? PDFView(
                                filePath: imageUrl,
                                enableSwipe: true,
                                swipeHorizontal: true,
                                autoSpacing: true,
                                pageFling: true,
                              )
                            : Image.network(imageUrl, fit: BoxFit.contain),
                      ),
                    ),

                    const SizedBox(height: 20),

                    // ✅ Container para os botões Back e Delete
                    SizedBox(
                      width: 330, // Mesmo tamanho usado em outras telas
                      child: Row(
                        mainAxisAlignment: MainAxisAlignment
                            .spaceBetween, // ✅ Back na esquerda, Delete na direita
                        children: [
                          // Botão de voltar (esquerda)
                          CustomButton(
                            type: ButtonType.backButton,
                            onPressed: () {
                              Navigator.pop(context);
                            },
                          ),

                          // Mini botão de deletar (direita)
                          CustomMiniButton(
                            type: MiniButtonType.deleteMiniButton,
                            onPressed: () => _confirmDelete(context, docId),
                          ),
                        ],
                      ),
                    ),

                    const SizedBox(height: 20),
                  ],
                );
              },
            ),
          ),
        ],
      ),
    );
  }

  /// Recupera os detalhes do recibo do Firestore com base na `imageUrl`
  Future<DocumentSnapshot> _getReceiptDetails(String imageUrl) async {
    final query = await FirebaseFirestore.instance
        .collection("receipts")
        .where("imageUrl", isEqualTo: imageUrl)
        .limit(1)
        .get();

    if (query.docs.isNotEmpty) {
      return query.docs.first;
    } else {
      return FirebaseFirestore.instance
          .collection("receipts")
          .doc("empty")
          .get();
    }
  }

  /// Exibe um alerta de confirmação antes de deletar
  void _confirmDelete(BuildContext context, String docId) {
    showDialog(
      context: context,
      builder: (BuildContext ctx) {
        return AlertDialog(
          title: const Text("Delete Receipt"),
          content: const Text(
              "Are you sure you want to delete this receipt? This action cannot be undone."),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(ctx),
              child: const Text("Cancel"),
            ),
            TextButton(
              onPressed: () {
                Navigator.pop(ctx); // Fechar o alerta
                _deleteReceipt(context, docId);
              },
              child: const Text("Delete", style: TextStyle(color: Colors.red)),
            ),
          ],
        );
      },
    );
  }

  /// **Deleta o recibo do Firestore e Firebase Storage**
  Future<void> _deleteReceipt(BuildContext context, String docId) async {
    try {
      // Recuperar a URL do arquivo para deletá-lo do Storage
      final docRef =
          FirebaseFirestore.instance.collection("receipts").doc(docId);
      final docSnapshot = await docRef.get();
      if (docSnapshot.exists) {
        final data = docSnapshot.data() as Map<String, dynamic>;
        final String fileUrl = data["imageUrl"] ?? "";

        // Deletar o arquivo do Firebase Storage
        if (fileUrl.isNotEmpty) {
          final storageRef = FirebaseStorage.instance.refFromURL(fileUrl);
          await storageRef.delete();
        }

        // Deletar o documento do Firestore
        await docRef.delete();

        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text("Receipt deleted successfully!")),
        );

        Navigator.pop(context); // Voltar para a lista de recibos após deletar
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text("Error deleting receipt: $e")),
      );
    }
  }

  /// Constrói uma linha com o título e o valor da informação
  Widget _buildInfoRow(String title, String value) {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 4),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Text(
            title,
            style: const TextStyle(
              fontSize: 16,
              fontWeight: FontWeight.bold,
            ),
          ),
          Expanded(
            child: Text(
              value,
              style: const TextStyle(fontSize: 16),
              textAlign: TextAlign.end,
            ),
          ),
        ],
      ),
    );
  }
}
// lib/screens/add_workers_screen.dart

import 'package:flutter/material.dart';
import '../widgets/base_layout.dart';
import '../widgets/title_box.dart';
import '../widgets/custom_button.dart';
import '../widgets/custom_button_mini.dart';
import '../widgets/worker_hours_input_section.dart';
import '../models/timesheet_data.dart';

class AddWorkersScreen extends StatefulWidget {
  const AddWorkersScreen({Key? key}) : super(key: key);

  @override
  State<AddWorkersScreen> createState() => _AddWorkersScreenState();
}

class _AddWorkersScreenState extends State<AddWorkersScreen> {
  bool _showWorkerSection = false;
  int? _editIndex;

  final TextEditingController _nameController = TextEditingController();
  final TextEditingController _startController = TextEditingController();
  final TextEditingController _finishController = TextEditingController();
  final TextEditingController _hoursController = TextEditingController();
  final TextEditingController _travelController = TextEditingController();
  final TextEditingController _mealController = TextEditingController();

  final GlobalKey<WorkerHoursInputSectionState> _workerSectionKey =
      GlobalKey<WorkerHoursInputSectionState>();

  final List<Map<String, String>> _workersData = [];
  bool _showAddWorkerFirstMessage = false;

  late TimesheetData timesheetData;
  bool _editMode = false;
  String _docId = '';

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();
    final args =
        ModalRoute.of(context)?.settings.arguments as Map<String, dynamic>?;

    if (args != null) {
      _editMode = args['editMode'] ?? false;
      _docId = args['docId'] ?? '';
      timesheetData = args['timesheetData'] ?? TimesheetData();
    } else {
      timesheetData = TimesheetData();
    }

    // Sincroniza a lista local com a do timesheetData
    _workersData.clear();
    _workersData.addAll(timesheetData.workers);
  }

  void _clearAllFields() {
    _nameController.clear();
    _startController.clear();
    _finishController.clear();
    _hoursController.clear();
    _travelController.clear();
    _mealController.clear();
  }

  void _clearOnlyName() {
    _nameController.clear();
    _workerSectionKey.currentState?.resetDropdown();
  }

  bool _validateFields() {
    final nameEmpty = _nameController.text.trim().isEmpty;
    final hoursEmpty = _hoursController.text.trim().isEmpty;

    _workerSectionKey.currentState?.setNameError(nameEmpty);
    _workerSectionKey.currentState?.setHoursError(hoursEmpty);

    return !(nameEmpty || hoursEmpty);
  }

  void _handleAddOrSave() {
    if (!_validateFields()) return;

    final name = _nameController.text.trim();
    final start = _startController.text.trim();
    final finish = _finishController.text.trim();
    final hours = _hoursController.text.trim();
    final travel = _travelController.text.trim();
    final meal = _mealController.text.trim();

    setState(() {
      final workerMap = {
        'name': name,
        'start': start,
        'finish': finish,
        'hours': hours,
        'travel': travel,
        'meal': meal,
      };

      if (_editIndex == null) {
        // Add
        _workersData.add(workerMap);
        timesheetData.workers.add(workerMap);
        _clearOnlyName();
      } else {
        // Save (edição)
        _workersData[_editIndex!] = workerMap;
        timesheetData.workers[_editIndex!] = workerMap;
        _editIndex = null;
        _clearOnlyName();
      }
      _showAddWorkerFirstMessage = false;
    });
  }

  void _handleNext() {
    if (_workersData.isEmpty) {
      setState(() {
        _showAddWorkerFirstMessage = true;
      });
      return;
    }
    // Navega para ReviewTimeSheet
    Navigator.pushNamed(
      context,
      '/review-time-sheet',
      arguments: {
        'editMode': _editMode,
        'docId': _docId,
        'timesheetData': timesheetData,
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return BaseLayout(
      title: "Timesheet",
      child: SingleChildScrollView(
        padding: const EdgeInsets.symmetric(vertical: 16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.center,
          children: [
            const Center(child: TitleBox(title: "Add Workers")),
            const SizedBox(height: 20),

            // Barra com BACK, ADD Worker e NEXT
            SizedBox(
              width: 330,
              child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  CustomButton(
                    type: ButtonType.backButton,
                    onPressed: () {
                      // Retorna para NewTimeSheetScreen com os dados atualizados:
                      Navigator.pushNamed(
                        context,
                        '/new-time-sheet',
                        arguments: {
                          'editMode': _editMode,
                          'docId': _docId,
                          'timesheetData': timesheetData,
                        },
                      );
                    },
                  ),
                  CustomButton(
                    type: ButtonType.addWorkerButton,
                    onPressed: () {
                      setState(() {
                        _showAddWorkerFirstMessage = false;
                        _showWorkerSection = true;
                        _editIndex = null;
                      });
                    },
                  ),
                  CustomButton(
                    type: ButtonType.nextButton,
                    onPressed: _handleNext,
                  ),
                ],
              ),
            ),

            if (_showAddWorkerFirstMessage) ...[
              const SizedBox(height: 10),
              const Text(
                "Add a worker first.",
                textAlign: TextAlign.center,
                style: TextStyle(
                  fontFamily: 'Barlow',
                  fontSize: 24,
                  color: Colors.red,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ],
            const SizedBox(height: 20),

            // Seção p/ adicionar/editar worker
            if (_showWorkerSection) ...[
              Container(
                decoration: const BoxDecoration(
                  color: Color(0xFFFEFFE4),
                  borderRadius: BorderRadius.only(
                    topLeft: Radius.circular(5),
                    topRight: Radius.circular(5),
                  ),
                ),
                child: WorkerHoursInputSection(
                  key: _workerSectionKey,
                  nameController: _nameController,
                  startController: _startController,
                  finishController: _finishController,
                  hoursController: _hoursController,
                  travelController: _travelController,
                  mealController: _mealController,
                ),
              ),
              const SizedBox(height: 20),

              SizedBox(
                width: 270,
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    CustomMiniButton(
                      type: MiniButtonType.cancelMiniButton,
                      onPressed: () {
                        setState(() {
                          _showWorkerSection = false;
                          _editIndex = null;
                        });
                        _clearAllFields();
                        _workerSectionKey.currentState?.resetDropdown();
                      },
                    ),
                    CustomMiniButton(
                      type: MiniButtonType.clearMiniButton,
                      onPressed: () {
                        _clearAllFields();
                        _workerSectionKey.currentState?.resetDropdown();
                      },
                    ),
                    CustomMiniButton(
                      type: _editIndex == null
                          ? MiniButtonType.addMiniButton
                          : MiniButtonType.saveMiniButton,
                      onPressed: _handleAddOrSave,
                    ),
                  ],
                ),
              ),
              const SizedBox(height: 20),
            ],

            // Tabela de workers
            if (_workersData.isNotEmpty) _buildWorkersTable(),
          ],
        ),
      ),
    );
  }

  Widget _buildWorkersTable() {
    return Container(
      width: 340,
      decoration: BoxDecoration(
        border: Border.all(color: Colors.black, width: 0.5),
      ),
      child: Table(
        border: TableBorder.all(color: Colors.black, width: 0.5),
        columnWidths: const {
          0: FixedColumnWidth(130),
          1: FixedColumnWidth(50),
          2: FixedColumnWidth(50),
          3: FixedColumnWidth(50),
          4: FixedColumnWidth(30),
          5: FixedColumnWidth(30),
        },
        children: [
          TableRow(
            children: [
              _buildHeaderCell("Name"),
              _buildHeaderCell("Start"),
              _buildHeaderCell("Finish"),
              _buildHeaderCell("Hours"),
              _buildHeaderCell("T"),
              _buildHeaderCell("M"),
            ],
          ),
          for (int i = 0; i < _workersData.length; i++)
            _buildDataRow(_workersData[i], i),
        ],
      ),
    );
  }

  Widget _buildHeaderCell(String text) {
    return Container(
      height: 20,
      alignment: Alignment.center,
      child: Text(
        text,
        style: const TextStyle(
          fontFamily: 'Barlow',
          fontSize: 15,
          fontWeight: FontWeight.bold,
          color: Color(0xFF3B3B3B),
        ),
        textAlign: TextAlign.center,
      ),
    );
  }

  TableRow _buildDataRow(Map<String, String> worker, int index) {
    final name = worker['name'] ?? '';
    final start = worker['start'] ?? '';
    final finish = worker['finish'] ?? '';
    final hours = worker['hours'] ?? '';
    final travel = worker['travel'] ?? '';
    final meal = worker['meal'] ?? '';

    return TableRow(
      children: [
        _buildDataCell(name, isBold: true, index: index),
        _buildDataCell(start, index: index),
        _buildDataCell(finish, index: index),
        _buildDataCell(hours, isBold: true, index: index),
        _buildDataCell(travel, index: index),
        _buildDataCell(meal, index: index),
      ],
    );
  }

  Widget _buildDataCell(String text, {bool isBold = false, required int index}) {
    return InkWell(
      onTap: () {
        // Carrega dados para edição
        setState(() {
          _showWorkerSection = true;
          _editIndex = index;
        });
        final w = _workersData[index];
        _nameController.text = w['name'] ?? '';
        _startController.text = w['start'] ?? '';
        _finishController.text = w['finish'] ?? '';
        _hoursController.text = w['hours'] ?? '';
        _travelController.text = w['travel'] ?? '';
        _mealController.text = w['meal'] ?? '';
        _workerSectionKey.currentState?.setDropdownValue(w['name'] ?? '');
      },
      child: Container(
        height: 35,
        alignment: Alignment.center,
        child: Text(
          text,
          style: TextStyle(
            fontFamily: 'Barlow',
            fontSize: 16,
            color: const Color(0xFF3B3B3B),
            fontWeight: isBold ? FontWeight.bold : FontWeight.normal,
          ),
          textAlign: TextAlign.center,
        ),
      ),
    );
  }
}
import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import '../widgets/base_layout.dart';
import '../widgets/title_box.dart';
import '../widgets/custom_button.dart';

class UsersScreen extends StatelessWidget {
  const UsersScreen({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return BaseLayout(
      title: "Timesheet",
      child: SingleChildScrollView(
        padding: const EdgeInsets.symmetric(vertical: 16),
        child: Column(
          children: [
            const TitleBox(title: "Users"),
            const SizedBox(height: 20),
            // Botão para criar novo usuário
            CustomButton(
              type: ButtonType.addUserButton,
              onPressed: () {
                Navigator.pushNamed(context, '/new-user');
              },
            ),
            const SizedBox(height: 20),

            StreamBuilder<QuerySnapshot>(
              stream: FirebaseFirestore.instance
                  .collection('users')
                  .orderBy('createdAt', descending: true)
                  .snapshots(),
              builder: (context, snapshot) {
                if (snapshot.hasError) {
                  return const Text(
                    'Erro ao carregar usuários',
                    style: TextStyle(color: Colors.red),
                  );
                }
                if (snapshot.connectionState == ConnectionState.waiting) {
                  return const Center(child: CircularProgressIndicator());
                }

                final docs = snapshot.data?.docs ?? [];
                if (docs.isEmpty) {
                  return const Text('Nenhum usuário encontrado.');
                }

                return Container(
                  // Reduzindo 60 px da largura total da tela
                  width: MediaQuery.of(context).size.width - 60,
                  // se quiser um limite mínimo, ex: (MediaQuery.of(context).size.width - 60).clamp(0, 600)
                  child: GridView.builder(
                    shrinkWrap: true,
                    physics: const NeverScrollableScrollPhysics(),
                    itemCount: docs.length,
                    gridDelegate:
                        const SliverGridDelegateWithFixedCrossAxisCount(
                      crossAxisCount: 2, // 2 colunas
                      crossAxisSpacing: 12,
                      mainAxisSpacing: 12,
                      childAspectRatio: 2.5, // Ajuste para ficar coerente
                    ),
                    itemBuilder: (context, index) {
                      final data = docs[index].data() as Map<String, dynamic>;
                      final firstName = data['firstName'] ?? '';
                      final lastName = data['lastName'] ?? '';

                      // Card no estilo timesheet: amarelo + borda azul
                      return Container(
                        decoration: BoxDecoration(
                          color: const Color(0xFFFFFFD0), // Fundo amarelo
                          border: Border.all(
                            color: const Color(0xFF0205D3), // Azul
                            width: 2,
                          ),
                          borderRadius: BorderRadius.circular(5),
                        ),
                        child: Center(
                          child: Padding(
                            padding: const EdgeInsets.all(8.0),
                            child: Text(
                              '$firstName $lastName',
                              textAlign: TextAlign.center,
                              style: const TextStyle(
                                fontSize: 16,
                                fontWeight: FontWeight.w600,
                              ),
                            ),
                          ),
                        ),
                      );
                    },
                  ),
                );
              },
            ),
          ],
        ),
      ),
    );
  }
}
import 'dart:io';
import 'package:flutter/material.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:intl/intl.dart';
import '../widgets/base_layout.dart';
import '../widgets/title_box.dart';
import '../widgets/custom_button.dart';
import '../widgets/custom_button_mini.dart';
import '../widgets/time_sheet_row.dart';
import '../services/pdf_service.dart';
import 'package:timesheet_app/main.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import '../services/local_timesheet_service.dart';

class TimesheetsScreen extends StatefulWidget {
  const TimesheetsScreen({Key? key}) : super(key: key);

  @override
  State<TimesheetsScreen> createState() => _TimesheetsScreenState();
}

class _TimesheetsScreenState extends State<TimesheetsScreen> with RouteAware {
  final ScrollController _scrollController = ScrollController();
  List<LocalTimesheet> _allLocalTimesheets = [];
  List<LocalTimesheet> _filteredTimesheets = [];

  bool _isLoading = false;
  bool _showFilters = false;

  // Estado efetivo (real) – usado na listagem
  bool _isDescending = true;
  String? _userId;
  String? _userRole;
  bool _isLoadingUser = true;
  DateTimeRange? _selectedRange;
  // Agora criamos a lista de creators somente com quem tem timesheet
  List<String> _creatorList = ["Creator"];
  Map<String, String> _usersMap = {};
  String _selectedCreator = "Creator";
  String _jobNameSearch = "";
  String _tmSearch = "";
  String _materialSearch = "";

  // Estado candidato – usado só no menu antes de clicar em Apply
  bool _candidateIsDescending = true;
  DateTimeRange? _candidateSelectedRange;
  String _candidateSelectedCreator = "Creator";
  String _candidateJobName = "";
  String _candidateTm = "";
  String _candidateMaterial = "";

  // Controllers para os campos de texto no menu
  final TextEditingController _jobNameController = TextEditingController();
  final TextEditingController _tmController = TextEditingController();
  final TextEditingController _materialController = TextEditingController();

  final Map<String, Map<String, dynamic>> _selectedTimesheets = {};

  @override
  void initState() {
    super.initState();
    _getUserInfo();
  }

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();
    routeObserver.subscribe(this, ModalRoute.of(context)!);
  }

  @override
  void dispose() {
    routeObserver.unsubscribe(this);
    _scrollController.dispose();
    _jobNameController.dispose();
    _tmController.dispose();
    _materialController.dispose();
    super.dispose();
  }

  @override
  void didPopNext() {
    _syncLocalTimesheets();
  }

  Future<void> _getUserInfo() async {
    final user = FirebaseAuth.instance.currentUser;
    if (user == null) {
      Navigator.pushReplacementNamed(context, '/login');
      return;
    }
    _userId = user.uid;
    final userDoc =
        await FirebaseFirestore.instance.collection('users').doc(_userId).get();
    if (userDoc.exists && userDoc.data()?['role'] != null) {
      _userRole = userDoc.data()!['role'] as String;
    } else {
      _userRole = 'User';
    }

    // Carrega todos os users para mapear userId -> fullName
    await _loadUsersMap();
    setState(() {
      _isLoadingUser = false;
    });

    await _syncLocalTimesheets();
  }

  /// Carrega todos os usuários numa map { uid: fullName }, MAS não mexe em _creatorList aqui.
  Future<void> _loadUsersMap() async {
    final snap = await FirebaseFirestore.instance.collection('users').get();
    final Map<String, String> tempMap = {};
    for (var doc in snap.docs) {
      final data = doc.data();
      final uid = doc.id;
      final fullName =
          ((data["firstName"] ?? "") + " " + (data["lastName"] ?? "")).trim();
      tempMap[uid] = fullName.isNotEmpty ? fullName : "User";
    }
    _usersMap = tempMap;
  }

  /// Após sincronizar localmente, montamos a lista de creators
  /// com base em QUEM tem timesheet em _allLocalTimesheets.
  void _buildCreatorListFromTimesheets() {
    final creatorUidSet = <String>{}; // set de userIds presentes
    for (var ts in _allLocalTimesheets) {
      creatorUidSet.add(ts.userId);
    }

    final List<String> localCreators = [];
    for (var uid in creatorUidSet) {
      if (_usersMap.containsKey(uid)) {
        localCreators.add(_usersMap[uid]!);
      }
    }
    localCreators.sort();
    setState(() {
      _creatorList = ["Creator", ...localCreators];
    });
  }

  Future<void> _syncLocalTimesheets() async {
    setState(() => _isLoading = true);

    await LocalTimesheetService.syncWithFirestore();
    final allLocal = LocalTimesheetService.getAllTimesheets();

    setState(() {
      _allLocalTimesheets = allLocal;
      _isLoading = false;
    });

    // Agora que temos _allLocalTimesheets e _usersMap, montamos a lista de creators:
    _buildCreatorListFromTimesheets();

    _applyLocalFilters();
  }

  // Aplica os filtros efetivos (guardados em _selectedRange, _selectedCreator etc.)
  void _applyLocalFilters() {
    List<LocalTimesheet> result = List.from(_allLocalTimesheets);

    if (_userRole != "Admin") {
      result = result.where((ts) => ts.userId == _userId).toList();
    } else if (_selectedCreator != "Creator") {
      // Encontra o uid com base no fullName
      final uid = _usersMap.entries
          .firstWhere((e) => e.value == _selectedCreator,
              orElse: () => const MapEntry("", ""))
          .key;
      if (uid.isNotEmpty) {
        result = result.where((ts) => ts.userId == uid).toList();
      }
    }

    if (_selectedRange != null) {
      final start = _selectedRange!.start;
      final end = _selectedRange!.end;
      result = result.where((ts) {
        return ts.date.isAfter(start.subtract(const Duration(days: 1))) &&
            ts.date.isBefore(end.add(const Duration(days: 1)));
      }).toList();
    }

    if (_jobNameSearch.isNotEmpty) {
      final search = _jobNameSearch.toLowerCase();
      result = result.where((ts) {
        return ts.jobName.toLowerCase().contains(search);
      }).toList();
    }
    if (_tmSearch.isNotEmpty) {
      final search = _tmSearch.toLowerCase();
      result = result.where((ts) {
        return ts.tm.toLowerCase().contains(search);
      }).toList();
    }
    if (_materialSearch.isNotEmpty) {
      final search = _materialSearch.toLowerCase();
      result = result.where((ts) {
        return ts.material.toLowerCase().contains(search);
      }).toList();
    }

    result.sort((a, b) {
      if (_isDescending) {
        return b.date.compareTo(a.date);
      } else {
        return a.date.compareTo(b.date);
      }
    });

    setState(() {
      _filteredTimesheets = result;
    });
  }

  // Chame após clicar em "Apply" para copiar estado "candidato" -> estado efetivo
  void _applyCandidateFilters() {
    setState(() {
      // Copia do candidato para o real
      _isDescending = _candidateIsDescending;
      _selectedRange = _candidateSelectedRange;
      _selectedCreator = _candidateSelectedCreator;
      _jobNameSearch = _candidateJobName;
      _tmSearch = _candidateTm;
      _materialSearch = _candidateMaterial;
    });
    _applyLocalFilters();
  }

  @override
  Widget build(BuildContext context) {
    if (_isLoadingUser) {
      return const Scaffold(
        body: Center(child: CircularProgressIndicator()),
      );
    }
    return BaseLayout(
      title: "Timesheet",
      child: Column(
        children: [
          const SizedBox(height: 16),
          const Center(child: TitleBox(title: "Timesheets")),
          const SizedBox(height: 20),
          _buildTopBarCentered(),
          if (_showFilters) ...[
            const SizedBox(height: 20),
            _buildFilterContainer(context),
          ],
          Expanded(
            child: Column(
              children: [
                const SizedBox(height: 20),
                Expanded(
                  child: _buildTimesheetListView(_filteredTimesheets),
                ),
              ],
            ),
          ),
          if (_isLoading)
            const Padding(
              padding: EdgeInsets.all(8),
              child: CircularProgressIndicator(),
            ),
          if (!_isLoading && _filteredTimesheets.isEmpty)
            const Center(child: Text("No timesheets found.")),
        ],
      ),
    );
  }

  Widget _buildTopBarCentered() {
    final leftGroup = Row(
      mainAxisAlignment: MainAxisAlignment.center,
      children: [
        CustomButton(
          type: ButtonType.newButton,
          onPressed: () {
            Navigator.pushNamed(context, '/new-time-sheet');
          },
        ),
        const SizedBox(width: 20),
        if (_userRole == "Admin")
          CustomButton(
            type: ButtonType.pdfButton,
            onPressed: _selectedTimesheets.isEmpty
                ? () {
                    ScaffoldMessenger.of(context).showSnackBar(
                      const SnackBar(
                        content: Text("No timesheet selected."),
                      ),
                    );
                  }
                : _generatePdf,
          ),
      ],
    );

    final rightGroup = _userRole == "Admin"
        ? Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Row(
                children: [
                  CustomMiniButton(
                    type: MiniButtonType.sortMiniButton,
                    onPressed: () {
                      // Sempre que abrir o menu de filtros,
                      // copiamos estado efetivo -> candidato
                      setState(() {
                        _candidateIsDescending = _isDescending;
                        _candidateSelectedRange = _selectedRange;
                        _candidateSelectedCreator = _selectedCreator;
                        _candidateJobName = _jobNameSearch;
                        _candidateTm = _tmSearch;
                        _candidateMaterial = _materialSearch;

                        // Também atualizamos os TextControllers
                        _jobNameController.text = _candidateJobName;
                        _tmController.text = _candidateTm;
                        _materialController.text = _candidateMaterial;

                        _showFilters = !_showFilters;
                      });
                    },
                  ),
                  const SizedBox(width: 4),
                  CustomMiniButton(
                    type: MiniButtonType.selectAllMiniButton,
                    onPressed: _handleSelectAll,
                  ),
                  const SizedBox(width: 4),
                  CustomMiniButton(
                    type: MiniButtonType.deselectAllMiniButton,
                    onPressed: _handleDeselectAll,
                  ),
                ],
              ),
              const SizedBox(height: 4),
              Text(
                "Selected: ${_selectedTimesheets.length}",
                style: const TextStyle(
                  fontSize: 14,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ],
          )
        : const SizedBox();

    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 15),
      child: SizedBox(
        height: 60,
        child: Row(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            leftGroup,
            Flexible(
              child: SizedBox(
                width: 100,
                child: const SizedBox.shrink(),
              ),
            ),
            rightGroup,
          ],
        ),
      ),
    );
  }

  Widget _buildFilterContainer(BuildContext context) {
    final isDateActive = (_candidateSelectedRange != null);
    final isCreatorActive =
        (_userRole == "Admin" && _candidateSelectedCreator != "Creator");

    return ConstrainedBox(
      constraints: const BoxConstraints(maxWidth: 600),
      child: Container(
        margin: const EdgeInsets.symmetric(horizontal: 20),
        padding: const EdgeInsets.all(8),
        decoration: BoxDecoration(
          color: const Color(0xFFF0F0FF),
          borderRadius: BorderRadius.circular(10),
          boxShadow: const [
            BoxShadow(color: Colors.black26, blurRadius: 4, offset: Offset(0, 2))
          ],
        ),
        child: Column(
          children: [
            // Range e ordenação
            Row(
              children: [
                ElevatedButton(
                  style: ElevatedButton.styleFrom(
                    backgroundColor:
                        isDateActive ? Colors.green : const Color(0xFF0277BD),
                    foregroundColor: Colors.white,
                    minimumSize: const Size(80, 40),
                  ),
                  onPressed: () => _pickDateRange(context),
                  child: const Text("Range"),
                ),
                const SizedBox(width: 8),
                Expanded(
                  child: FittedBox(
                    fit: BoxFit.scaleDown,
                    alignment: Alignment.centerLeft,
                    child: _candidateSelectedRange == null
                        ? const Text("No date range",
                            style: TextStyle(
                                fontSize: 15, fontWeight: FontWeight.bold))
                        : Text(
                            "${DateFormat('MMM/dd').format(_candidateSelectedRange!.start)} - ${DateFormat('MMM/dd').format(_candidateSelectedRange!.end)}",
                            style: const TextStyle(
                                fontSize: 15, fontWeight: FontWeight.bold)),
                  ),
                ),
                const SizedBox(width: 8),
                _buildSquareArrowButton(
                  icon: Icons.arrow_upward,
                  isActive: !_candidateIsDescending,
                  onTap: () {
                    setState(() {
                      _candidateIsDescending = false;
                    });
                  },
                ),
                const SizedBox(width: 8),
                _buildSquareArrowButton(
                  icon: Icons.arrow_downward,
                  isActive: _candidateIsDescending,
                  onTap: () {
                    setState(() {
                      _candidateIsDescending = true;
                    });
                  },
                ),
              ],
            ),
            const SizedBox(height: 10),
            if (_userRole == "Admin") ...[
              Container(
                height: 40,
                padding: const EdgeInsets.symmetric(horizontal: 6),
                decoration: BoxDecoration(
                  color: Colors.white,
                  border: Border.all(
                    color: isCreatorActive ? Colors.green : const Color(0xFF0205D3),
                    width: isCreatorActive ? 2 : 1,
                  ),
                  boxShadow: isCreatorActive
                      ? [
                          BoxShadow(
                            color: Colors.green.withOpacity(0.4),
                            blurRadius: 4,
                            offset: const Offset(0, 2),
                          ),
                        ]
                      : [],
                  borderRadius: BorderRadius.circular(4),
                ),
                child: DropdownButtonHideUnderline(
                  child: DropdownButton<String>(
                    value: _candidateSelectedCreator,
                    style: const TextStyle(fontSize: 14, color: Colors.black),
                    onChanged: (value) {
                      if (value != null) {
                        setState(() {
                          _candidateSelectedCreator = value;
                        });
                      }
                    },
                    items: _creatorList.map((creatorName) {
                      return DropdownMenuItem<String>(
                        value: creatorName,
                        child: Text(creatorName),
                      );
                    }).toList(),
                  ),
                ),
              ),
              const SizedBox(height: 10),
            ],
            // Job Name
            _buildSearchField(
              controller: _jobNameController,
              label: "Job Name",
              hintText: "Job Name",
              isUsed: _candidateJobName.isNotEmpty,
              onChanged: (val) {
                setState(() {
                  _candidateJobName = val.trim();
                });
              },
            ),
            // T.M.
            _buildSearchField(
              controller: _tmController,
              label: "T.M.",
              hintText: "T.M.",
              isUsed: _candidateTm.isNotEmpty,
              onChanged: (val) {
                setState(() {
                  _candidateTm = val.trim();
                });
              },
            ),
            // Material
            _buildSearchField(
              controller: _materialController,
              label: "Material",
              hintText: "Material",
              isUsed: _candidateMaterial.isNotEmpty,
              onChanged: (val) {
                setState(() {
                  _candidateMaterial = val.trim();
                });
              },
            ),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceEvenly,
              children: [
                CustomMiniButton(
                  type: MiniButtonType.clearAllMiniButton,
                  onPressed: () {
                    setState(() {
                      // zera o estado candidato
                      _candidateSelectedRange = null;
                      _candidateSelectedCreator = "Creator";
                      _candidateIsDescending = true;
                      _candidateJobName = "";
                      _candidateTm = "";
                      _candidateMaterial = "";
                      // controllers
                      _jobNameController.clear();
                      _tmController.clear();
                      _materialController.clear();
                    });
                  },
                ),
                // BOTÃO APPLY – APLICA PARA O ESTADO EFETIVO
                CustomMiniButton(
                  type: MiniButtonType.applyMiniButton,
                  onPressed: () {
                    _applyCandidateFilters();
                  },
                ),
                // FECHA
                CustomMiniButton(
                  type: MiniButtonType.closeMiniButton,
                  onPressed: () {
                    setState(() {
                      _showFilters = false;
                    });
                  },
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildSearchField({
    required TextEditingController controller,
    required String label,
    required String hintText,
    required bool isUsed,
    required ValueChanged<String> onChanged,
  }) {
    return Container(
      height: 60,
      margin: const EdgeInsets.only(bottom: 8),
      decoration: BoxDecoration(
        boxShadow: isUsed
            ? [
                BoxShadow(
                  color: Colors.green.withOpacity(0.4),
                  blurRadius: 4,
                  offset: const Offset(0, 2),
                ),
              ]
            : [],
      ),
      child: TextField(
        controller: controller,
        onChanged: onChanged,
        textCapitalization: TextCapitalization.words,
        style: const TextStyle(
          fontSize: 16,
          color: Colors.black,
        ),
        decoration: InputDecoration(
          labelText: label,
          labelStyle: const TextStyle(
            fontWeight: FontWeight.bold,
            fontSize: 16,
            color: Colors.black,
          ),
          floatingLabelStyle: const TextStyle(
            fontWeight: FontWeight.bold,
            fontSize: 12,
            color: Colors.green,
          ),
          hintText: hintText,
          hintStyle: const TextStyle(
            fontSize: 14,
            color: Colors.grey,
          ),
          filled: true,
          fillColor: Colors.white,
          enabledBorder: OutlineInputBorder(
            borderSide: BorderSide(
              color: isUsed ? Colors.green : Color(0xFF0205D3),
              width: isUsed ? 2 : 1,
            ),
          ),
          focusedBorder: OutlineInputBorder(
            borderSide: BorderSide(
              color: isUsed ? Colors.green : Color(0xFF0205D3),
              width: isUsed ? 2 : 1,
            ),
          ),
          contentPadding: const EdgeInsets.symmetric(
            horizontal: 12,
            vertical: 12,
          ),
        ),
      ),
    );
  }

  Widget _buildSquareArrowButton({
    required IconData icon,
    required bool isActive,
    required VoidCallback onTap,
  }) {
    return InkWell(
      onTap: onTap,
      child: Container(
        width: 40,
        height: 40,
        decoration: BoxDecoration(
          color: isActive ? const Color(0xFF0205D3) : Colors.grey,
          borderRadius: BorderRadius.circular(4),
        ),
        child: Icon(icon, color: Colors.white, size: 20),
      ),
    );
  }

  Widget _buildTimesheetListView(List<LocalTimesheet> localDocs) {
    return ListView.builder(
      controller: _scrollController,
      itemCount: localDocs.length,
      itemBuilder: (context, index) {
        final item = localDocs[index];
        final docId = item.docId;
        final userName = _usersMap[item.userId] ?? "User";
        final jobName = item.jobName;
        final dtParsed = item.date;
        final bool isChecked = _selectedTimesheets.containsKey(docId);

        String day = '--';
        String month = '--';
        if (dtParsed != null) {
          day = DateFormat('d').format(dtParsed);
          month = DateFormat('MMM').format(dtParsed);
        }

        return Padding(
          key: ValueKey(docId),
          padding: const EdgeInsets.only(bottom: 5),
          child: GestureDetector(
            onTap: () {
              Navigator.pushNamed(
                context,
                '/timesheet-view',
                arguments: {'docId': docId},
              );
            },
            child: TimeSheetRowItem(
              day: day,
              month: month,
              jobName: jobName,
              userName: userName,
              initialChecked: isChecked,
              onCheckChanged: (checked) {
                setState(() {
                  if (checked) {
                    _selectedTimesheets[docId] = {
                      'userId': item.userId,
                      'jobName': item.jobName,
                    };
                  } else {
                    _selectedTimesheets.remove(docId);
                  }
                });
              },
            ),
          ),
        );
      },
    );
  }

  Future<void> _pickDateRange(BuildContext context) async {
    final now = DateTime.now();
    final selected = await showDateRangePicker(
      context: context,
      initialDateRange:
          _candidateSelectedRange ??
              DateTimeRange(
                start: now.subtract(const Duration(days: 7)),
                end: now,
              ),
      firstDate: DateTime(2000),
      lastDate: DateTime(2100),
    );
    if (selected != null) {
      setState(() {
        _candidateSelectedRange = selected;
      });
    }
  }

  Future<void> _generatePdf() async {
    if (_selectedTimesheets.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text("No timesheet selected.")),
      );
      return;
    }
    try {
      await PdfService().generateTimesheetPdf(_selectedTimesheets);
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text("PDF generated successfully!")),
      );
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text("Error generating PDF: $e")),
      );
    }
  }

  void _handleSelectAll() {
    for (var item in _filteredTimesheets) {
      _selectedTimesheets[item.docId] = {
        'userId': item.userId,
        'jobName': item.jobName,
      };
    }
    setState(() {});
  }

  void _handleDeselectAll() {
    setState(() {
      _selectedTimesheets.clear();
    });
  }
}
import 'dart:io';
import 'package:flutter/foundation.dart' show defaultTargetPlatform, TargetPlatform;
import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:intl/intl.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:printing/printing.dart';
import 'package:cunning_document_scanner/cunning_document_scanner.dart';
import '../services/receipt_pdf_service.dart';
import '../widgets/base_layout.dart';
import '../widgets/title_box.dart';
import '../widgets/custom_button.dart';
import '../widgets/custom_button_mini.dart';
import 'package:timesheet_app/main.dart';

class ReceiptsScreen extends StatefulWidget {
  const ReceiptsScreen({Key? key}) : super(key: key);
  @override
  _ReceiptsScreenState createState() => _ReceiptsScreenState();
}

class _ReceiptsScreenState extends State<ReceiptsScreen> with RouteAware {
  final ScrollController _scrollController = ScrollController();
  List<DocumentSnapshot> _receipts = [];
  DocumentSnapshot? _lastDocument;
  bool _isLoading = false;
  bool _hasMore = true;
  final int _pageSize = 15;
  bool _showFilters = false;
  DateTimeRange? _selectedRange;
  bool _isDescending = true;
  Map<String, String> _userMap = {};
  List<String> _creatorList = ["Creator"];
  String _selectedCreator = "Creator";
  List<String> _cardList = ["Card"];
  String _selectedCard = "Card";
  final Map<String, Map<String, dynamic>> _selectedReceipts = {};
  String _userRole = "User";
  String _userId = "";
  bool _showCardSizeSlider = false;
  double _maxCardWidth = 250;

  @override
  void initState() {
    super.initState();
    _getUserInfo();
    _loadCardList();
    _scrollController.addListener(() {
      if (_scrollController.position.pixels >=
              _scrollController.position.maxScrollExtent * 0.9 &&
          !_isLoading &&
          _hasMore) {
        _loadMoreReceipts();
      }
    });
  }

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();
    routeObserver.subscribe(this, ModalRoute.of(context)!);
  }

  @override
  void dispose() {
    routeObserver.unsubscribe(this);
    _scrollController.dispose();
    super.dispose();
  }

  Future<void> _getUserInfo() async {
    final user = FirebaseAuth.instance.currentUser;
    if (user != null) {
      _userId = user.uid;
      final userDoc = await FirebaseFirestore.instance
          .collection("users")
          .doc(_userId)
          .get();
      if (userDoc.exists) {
        _userRole = userDoc.data()?["role"] ?? "User";
      }
    }
    await _loadUsers();
    setState(() {});
    _resetAndLoadFirstPage();
  }

  Future<void> _loadUsers() async {
    final snapshot = await FirebaseFirestore.instance.collection('users').get();
    final Map<String, String> tempMap = {};
    for (var doc in snapshot.docs) {
      final data = doc.data();
      final fullName =
          "${data['firstName'] ?? ''} ${data['lastName'] ?? ''}".trim();
      if (fullName.isNotEmpty) {
        tempMap[doc.id] = fullName;
      }
    }
    _userMap = tempMap;
    _creatorList = ["Creator", ...tempMap.values.toList()..sort()];
  }

  Future<void> _loadCardList() async {
    final snap = await FirebaseFirestore.instance
        .collection('cards')
        .where('status', isEqualTo: 'ativo')
        .get();
    final loaded = snap.docs
        .map((doc) => doc.data()['last4Digits']?.toString() ?? '')
        .where((last4) => last4.isNotEmpty)
        .toList()
      ..sort();
    _cardList = ["Card", ...loaded];
  }

  Query _getBaseQuery() {
    Query query = FirebaseFirestore.instance.collection("receipts");
    if (_userRole != "Admin") {
      query = query.where("userId", isEqualTo: _userId);
    }
    if (_userRole == "Admin" && _selectedCreator != "Creator") {
      final userId = _userMap.entries
          .firstWhere((entry) => entry.value == _selectedCreator,
              orElse: () => const MapEntry("", ""))
          .key;
      if (userId.isNotEmpty) {
        query = query.where("userId", isEqualTo: userId);
      }
    }
    if (_selectedCard != "Card") {
      query = query.where("cardLast4", isEqualTo: _selectedCard);
    }
    if (_selectedRange != null) {
      query = query
          .where("date",
              isGreaterThanOrEqualTo: Timestamp.fromDate(_selectedRange!.start))
          .where("date",
              isLessThanOrEqualTo: Timestamp.fromDate(_selectedRange!.end));
    }
    query = query.orderBy("date", descending: _isDescending);
    return query;
  }

  void _resetAndLoadFirstPage() async {
    setState(() {
      _receipts.clear();
      _lastDocument = null;
      _hasMore = true;
    });
    await _loadMoreReceipts();
  }

  Future<void> _loadMoreReceipts() async {
    if (_isLoading || !_hasMore) return;
    setState(() {
      _isLoading = true;
    });
    try {
      Query query = _getBaseQuery().limit(_pageSize);
      if (_lastDocument != null) {
        query = query.startAfterDocument(_lastDocument!);
      }
      final snap = await query.get();
      final docs = snap.docs;
      if (docs.isNotEmpty) {
        _lastDocument = docs.last;
        _receipts.addAll(docs);
      }
      if (docs.length < _pageSize) {
        _hasMore = false;
      }
    } catch (e) {
      debugPrint("Error loading receipts: $e");
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  // Função para exibir apenas "PrimeiroNome + InicialDoUltimoNome."
  String _shortenName(String fullName) {
    if (fullName.trim().isEmpty) return '';
    final parts = fullName.trim().split(' ');
    final firstName = parts[0];
    if (parts.length > 1) {
      // última parte do nome (último sobrenome)
      final lastName = parts[parts.length - 1];
      final lastInitial = lastName.isNotEmpty
          ? lastName.substring(0, 1).toUpperCase()
          : '';
      return '$firstName $lastInitial.';
    } else {
      return firstName; // se não houver sobrenome, mostra só o primeiro nome
    }
  }

  @override
  Widget build(BuildContext context) {
    final bool isMacOS = defaultTargetPlatform == TargetPlatform.macOS;
    return BaseLayout(
      title: "Time Sheet",
      child: Padding(
        padding: const EdgeInsets.symmetric(horizontal: 10),
        child: Column(
          children: [
            const SizedBox(height: 16),
            const Center(child: TitleBox(title: "Receipts")),
            const SizedBox(height: 20),
            _buildTopBarWithCardSizeSlider(isMacOS),
            if (_showFilters) ...[
              const SizedBox(height: 20),
              _buildFilterContainer(context),
            ],
            Expanded(child: _buildReceiptsGrid(_receipts, isMacOS)),
            if (_isLoading)
              const Padding(
                padding: EdgeInsets.all(8),
                child: CircularProgressIndicator(),
              ),
            if (!_isLoading && !_hasMore && _receipts.isEmpty)
              const Center(child: Text("No receipts found.")),
          ],
        ),
      ),
    );
  }

  Widget _buildTopBarWithCardSizeSlider(bool isMacOS) {
    return Column(
      children: [
        _buildTopBarCentered(isMacOS),
        if (isMacOS && _showCardSizeSlider)
          Container(
            margin: const EdgeInsets.symmetric(horizontal: 10, vertical: 6),
            padding: const EdgeInsets.all(8),
            decoration: BoxDecoration(
              color: const Color(0xFFF0F0FF),
              borderRadius: BorderRadius.circular(10),
              boxShadow: const [
                BoxShadow(color: Colors.black26, blurRadius: 4, offset: Offset(0, 2))
              ],
            ),
            child: Row(
              children: [
                const Text(
                  "Card Size:",
                  style: TextStyle(fontWeight: FontWeight.bold),
                ),
                const SizedBox(width: 8),
                const Text("Min"),
                Expanded(
                  child: Slider(
                    value: _maxCardWidth,
                    min: 150,
                    max: 600,
                    divisions: 45,
                    label: null,
                    onChanged: (double value) {
                      setState(() {
                        _maxCardWidth = value;
                      });
                    },
                  ),
                ),
                const Text("Max"),
              ],
            ),
          ),
      ],
    );
  }

  Widget _buildTopBarCentered(bool isMacOS) {
    final leftGroup = Row(
      mainAxisAlignment: MainAxisAlignment.center,
      children: [
        if (!isMacOS)
          CustomButton(
            type: ButtonType.newButton,
            onPressed: _scanDocument,
          ),
        if (!isMacOS) const SizedBox(width: 20),
        if (_userRole == "Admin")
          CustomButton(
            type: ButtonType.pdfButton,
            onPressed: _selectedReceipts.isEmpty
                ? () => ScaffoldMessenger.of(context).showSnackBar(
                      const SnackBar(content: Text("No receipts selected.")),
                    )
                : _generatePdf,
          ),
        if (isMacOS) const SizedBox(width: 20),
        if (isMacOS)
          CustomButton(
            type: ButtonType.columnsButton,
            onPressed: () {
              setState(() {
                _showCardSizeSlider = !_showCardSizeSlider;
              });
            },
          ),
      ],
    );

    final rightGroup = _userRole == "Admin"
        ? Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Row(
                children: [
                  CustomMiniButton(
                    type: MiniButtonType.sortMiniButton,
                    onPressed: () => setState(() => _showFilters = !_showFilters),
                  ),
                  const SizedBox(width: 4),
                  CustomMiniButton(
                    type: MiniButtonType.selectAllMiniButton,
                    onPressed: _handleSelectAll,
                  ),
                  const SizedBox(width: 4),
                  CustomMiniButton(
                    type: MiniButtonType.deselectAllMiniButton,
                    onPressed: _handleDeselectAll,
                  ),
                ],
              ),
              const SizedBox(height: 4),
              Text(
                "Selected: ${_selectedReceipts.length}",
                style: const TextStyle(fontSize: 14, fontWeight: FontWeight.bold),
              ),
            ],
          )
        : const SizedBox();

    return Row(
      mainAxisAlignment: MainAxisAlignment.center,
      children: [
        leftGroup,
        const SizedBox(width: 50),
        rightGroup,
      ],
    );
  }

  Widget _buildFilterContainer(BuildContext context) {
    return Container(
      margin: const EdgeInsets.symmetric(horizontal: 10),
      padding: const EdgeInsets.all(8),
      decoration: BoxDecoration(
        color: const Color(0xFFF0F0FF),
        borderRadius: BorderRadius.circular(10),
        boxShadow: const [
          BoxShadow(color: Colors.black26, blurRadius: 4, offset: Offset(0, 2))
        ],
      ),
      child: Column(
        children: [
          Row(
            children: [
              ElevatedButton(
                style: ElevatedButton.styleFrom(
                  backgroundColor: const Color(0xFF0277BD),
                  foregroundColor: Colors.white,
                  minimumSize: const Size(80, 40),
                ),
                onPressed: () => _pickDateRange(context),
                child: const Text("Range"),
              ),
              const SizedBox(width: 8),
              Expanded(
                child: FittedBox(
                  fit: BoxFit.scaleDown,
                  alignment: Alignment.centerLeft,
                  child: _selectedRange == null
                      ? const Text(
                          "No date range",
                          style: TextStyle(fontSize: 15, fontWeight: FontWeight.bold),
                        )
                      : Text(
                          "${DateFormat('MMM/dd').format(_selectedRange!.start)} - ${DateFormat('MMM/dd').format(_selectedRange!.end)}",
                          style: const TextStyle(fontSize: 15, fontWeight: FontWeight.bold),
                        ),
                ),
              ),
              const SizedBox(width: 8),
              _buildSquareArrowButton(
                icon: Icons.arrow_upward,
                isActive: !_isDescending,
                onTap: () {
                  setState(() {
                    _isDescending = false;
                    _resetAndLoadFirstPage();
                  });
                },
              ),
              const SizedBox(width: 8),
              _buildSquareArrowButton(
                icon: Icons.arrow_downward,
                isActive: _isDescending,
                onTap: () {
                  setState(() {
                    _isDescending = true;
                    _resetAndLoadFirstPage();
                  });
                },
              ),
            ],
          ),
          const SizedBox(height: 10),
          Row(
            children: [
              Expanded(
                flex: 3,
                child: Container(
                  height: 40,
                  padding: const EdgeInsets.symmetric(horizontal: 6),
                  decoration: BoxDecoration(
                    color: Colors.white,
                    border: Border.all(color: const Color(0xFF0205D3), width: 2),
                    borderRadius: BorderRadius.circular(4),
                  ),
                  child: DropdownButtonHideUnderline(
                    child: DropdownButton<String>(
                      value: _selectedCreator,
                      style: const TextStyle(fontSize: 14, color: Colors.black),
                      onChanged: (String? newValue) {
                        if (newValue != null) {
                          setState(() {
                            _selectedCreator = newValue;
                            _resetAndLoadFirstPage();
                          });
                        }
                      },
                      items: _creatorList.map((creator) {
                        return DropdownMenuItem<String>(
                          value: creator,
                          child: Text(creator, overflow: TextOverflow.ellipsis),
                        );
                      }).toList(),
                    ),
                  ),
                ),
              ),
              const SizedBox(width: 8),
              Expanded(
                flex: 2,
                child: Container(
                  height: 40,
                  padding: const EdgeInsets.symmetric(horizontal: 6),
                  decoration: BoxDecoration(
                    color: Colors.white,
                    border: Border.all(color: const Color(0xFF0205D3), width: 2),
                    borderRadius: BorderRadius.circular(4),
                  ),
                  child: DropdownButtonHideUnderline(
                    child: DropdownButton<String>(
                      value: _selectedCard,
                      style: const TextStyle(fontSize: 14, color: Colors.black),
                      onChanged: (String? value) {
                        if (value != null) {
                          setState(() {
                            _selectedCard = value;
                            _resetAndLoadFirstPage();
                          });
                        }
                      },
                      items: _cardList.map((cardLast4) {
                        return DropdownMenuItem<String>(
                          value: cardLast4,
                          child: Text(cardLast4, overflow: TextOverflow.ellipsis),
                        );
                      }).toList(),
                    ),
                  ),
                ),
              ),
            ],
          ),
          const SizedBox(height: 10),
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceEvenly,
            children: [
              CustomMiniButton(
                type: MiniButtonType.clearAllMiniButton,
                onPressed: () {
                  setState(() {
                    _selectedRange = null;
                    _isDescending = true;
                    _selectedCreator = "Creator";
                    _selectedCard = "Card";
                    _resetAndLoadFirstPage();
                  });
                },
              ),
              CustomMiniButton(
                type: MiniButtonType.applyMiniButton,
                onPressed: () {
                  setState(() {
                    _showFilters = false;
                    _resetAndLoadFirstPage();
                  });
                },
              ),
              CustomMiniButton(
                type: MiniButtonType.closeMiniButton,
                onPressed: () => setState(() => _showFilters = false),
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildSquareArrowButton({
    required IconData icon,
    required bool isActive,
    required VoidCallback onTap,
  }) {
    return InkWell(
      onTap: onTap,
      child: Container(
        width: 40,
        height: 40,
        decoration: BoxDecoration(
          color: isActive ? const Color(0xFF0205D3) : Colors.grey,
          borderRadius: BorderRadius.circular(4),
        ),
        child: Icon(icon, color: Colors.white, size: 20),
      ),
    );
  }

  Widget _buildReceiptsGrid(List<DocumentSnapshot> docs, bool isMacOS) {
    if (docs.isEmpty) {
      return const Center(child: Text("No receipts found."));
    }

    final gridDelegate =
        (defaultTargetPlatform == TargetPlatform.android ||
                defaultTargetPlatform == TargetPlatform.iOS)
            ? const SliverGridDelegateWithFixedCrossAxisCount(
                crossAxisCount: 3,
                crossAxisSpacing: 8,
                mainAxisSpacing: 8,
                childAspectRatio: 0.62,
              )
            : SliverGridDelegateWithMaxCrossAxisExtent(
                maxCrossAxisExtent: _maxCardWidth,
                crossAxisSpacing: 8,
                mainAxisSpacing: 8,
                childAspectRatio: 0.62,
              );

    return GridView.builder(
      controller: _scrollController,
      padding: const EdgeInsets.symmetric(vertical: 8),
      gridDelegate: gridDelegate,
      itemCount: docs.length,
      itemBuilder: (context, index) {
        final doc = docs[index];
        final data = doc.data() as Map<String, dynamic>;
        final docId = doc.id;

        // Nome completo do usuário
        final fullName = _userMap[data['userId']] ?? '';
        // Usando a função shortenName para exibir apenas "PrimeiroNome Inicial."
        final shortenedName = _shortenName(fullName);

        final amount = data['amount']?.toString() ?? '';
        final last4 = data['cardLast4']?.toString() ?? '0000';
        final imageUrl = data['imageUrl'] ?? '';
        final date = (data['date'] as Timestamp?)?.toDate();
        final isChecked = _selectedReceipts.containsKey(docId);

        String day = '--';
        String month = '--';
        if (date != null) {
          day = DateFormat('d').format(date);
          month = DateFormat('MMM').format(date);
        }

        return LayoutBuilder(
          builder: (context, constraints) {
            final double baseWidth = 220;
            final double scale = constraints.maxWidth / baseWidth;
            final double last4FontSize = (isMacOS ? 22 : 22) * scale;
            final double creatorFontSize = (isMacOS ? 14 : 18) * scale;
            final double amountFontSize = (isMacOS ? 28 : 30) * scale;
            final double dayFontSize = (isMacOS ? 24 : 26) * scale;
            final double monthFontSize = (isMacOS ? 20 : 22) * scale;

            return GestureDetector(
              onTap: () {
                Navigator.pushNamed(
                  context,
                  '/receipt-viewer',
                  arguments: {'imageUrl': imageUrl},
                );
              },
              child: Card(
                elevation: 3,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(8),
                  side: const BorderSide(color: Color(0xFF0205D3), width: 1),
                ),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    ClipRRect(
                      borderRadius: const BorderRadius.only(
                        topLeft: Radius.circular(6),
                        topRight: Radius.circular(6),
                      ),
                      child: AspectRatio(
                        aspectRatio: 16 / 15,
                        child: imageUrl.isNotEmpty
                            ? Image.network(
                                imageUrl,
                                fit: BoxFit.cover,
                                width: double.infinity,
                              )
                            : Container(
                                color: const Color(0xFFEEEEEE),
                                child: const Icon(Icons.receipt_long, size: 32, color: Colors.grey),
                              ),
                      ),
                    ),
                    Padding(
                      padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          AspectRatio(
                            aspectRatio: 5 / 1,
                            child: Row(
                              mainAxisAlignment: MainAxisAlignment.spaceBetween,
                              children: [
                                Text(
                                  last4,
                                  style: TextStyle(
                                    fontSize: last4FontSize,
                                    fontWeight: FontWeight.w600,
                                  ),
                                ),
                                // Exibe aqui o shortenedName
                                Text(
                                  shortenedName, 
                                  style: TextStyle(fontSize: creatorFontSize),
                                  overflow: TextOverflow.ellipsis,
                                ),
                              ],
                            ),
                          ),
                          const SizedBox(height: 4),
                          AspectRatio(
                            aspectRatio: 4 / 1,
                            child: Center(
                              child: Text(
                                amount,
                                style: TextStyle(
                                  fontSize: amountFontSize,
                                  fontWeight: FontWeight.bold,
                                  color: Colors.red,
                                ),
                              ),
                            ),
                          ),
                          const SizedBox(height: 4),
                          AspectRatio(
                            aspectRatio: 5 / 1,
                            child: Row(
                              mainAxisAlignment: MainAxisAlignment.spaceBetween,
                              children: [
                                RichText(
                                  text: TextSpan(
                                    style: TextStyle(
                                      fontSize: 10 * scale,
                                      color: Colors.black,
                                    ),
                                    children: [
                                      TextSpan(
                                        text: day,
                                        style: TextStyle(
                                          fontWeight: FontWeight.bold,
                                          fontSize: dayFontSize,
                                        ),
                                      ),
                                      const TextSpan(text: " "),
                                      TextSpan(
                                        text: month,
                                        style: TextStyle(
                                          fontWeight: FontWeight.w600,
                                          fontSize: monthFontSize,
                                        ),
                                      ),
                                    ],
                                  ),
                                ),
                                Checkbox(
                                  value: isChecked,
                                  onChanged: (checked) {
                                    setState(() {
                                      if (checked == true) {
                                        _selectedReceipts[docId] = data;
                                      } else {
                                        _selectedReceipts.remove(docId);
                                      }
                                    });
                                  },
                                  materialTapTargetSize:
                                      MaterialTapTargetSize.shrinkWrap,
                                  visualDensity: VisualDensity.compact,
                                ),
                              ],
                            ),
                          ),
                        ],
                      ),
                    ),
                  ],
                ),
              ),
            );
          },
        );
      },
    );
  }

  Future<void> _scanDocument() async {
    try {
      List<String>? scannedImages = await CunningDocumentScanner.getPictures();
      if (scannedImages != null && scannedImages.isNotEmpty) {
        String imagePath = scannedImages.first;
        Navigator.pushNamed(context, '/preview-receipt',
            arguments: {'imagePath': imagePath});
      } else {
        ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text("No document scanned.")));
      }
    } catch (e) {
      ScaffoldMessenger.of(context)
          .showSnackBar(SnackBar(content: Text("Scanning failed: $e")));
    }
  }

  Future<void> _generatePdf() async {
    if (_selectedReceipts.isEmpty) {
      ScaffoldMessenger.of(context)
          .showSnackBar(const SnackBar(content: Text("No receipt selected.")));
      return;
    }
    try {
      await ReceiptPdfService().generateReceiptsPdf(_selectedReceipts);
      ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text("PDF generated successfully!")));
    } catch (e) {
      ScaffoldMessenger.of(context)
          .showSnackBar(SnackBar(content: Text("Error generating PDF: $e")));
    }
  }

  void _handleSelectAll() {
    for (var doc in _receipts) {
      final data = doc.data() as Map<String, dynamic>;
      _selectedReceipts[doc.id] = data;
    }
    setState(() {});
  }

  void _handleDeselectAll() {
    setState(() {
      _selectedReceipts.clear();
    });
  }

  Future<void> _pickDateRange(BuildContext context) async {
    final now = DateTime.now();
    final selected = await showDateRangePicker(
      context: context,
      initialDateRange:
          _selectedRange ??
          DateTimeRange(start: now.subtract(const Duration(days: 7)), end: now),
      firstDate: DateTime(2000),
      lastDate: DateTime(2100),
    );
    if (selected != null) {
      setState(() {
        _selectedRange = selected;
        _resetAndLoadFirstPage();
      });
    }
  }
}
// lib/screens/new_time_sheet_screen.dart

import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import '../widgets/base_layout.dart';
import '../widgets/title_box.dart';
import '../widgets/custom_input_field.dart';
import '../widgets/custom_multiline_input_field.dart';
import '../widgets/date_picker_input.dart';
import '../widgets/custom_button.dart';
import '../widgets/custom_button_mini.dart';
import '../models/timesheet_data.dart';

class NewTimeSheetScreen extends StatefulWidget {
  const NewTimeSheetScreen({Key? key}) : super(key: key);

  @override
  State<NewTimeSheetScreen> createState() => _NewTimeSheetScreenState();
}

class _NewTimeSheetScreenState extends State<NewTimeSheetScreen> {
  final _jobNameController = TextEditingController();
  final _dateController = TextEditingController();
  final _tmController = TextEditingController();
  final _jobSizeController = TextEditingController();
  final _materialController = TextEditingController();
  final _jobDescController = TextEditingController();
  final _foremanController = TextEditingController();
  final _vehicleController = TextEditingController();

  bool _showJobNameError = false;
  bool _showDateError = false;
  bool _showJobDescError = false;

  late TimesheetData timesheetData;

  bool _editMode = false;
  String _docId = '';

  bool _initialized = false;

  @override
  void initState() {
    super.initState();
    // Listeners para manter timesheetData sincronizado com os campos
    _jobNameController.addListener(() {
      timesheetData.jobName = _jobNameController.text;
    });
    _dateController.addListener(() {
      timesheetData.date = _dateController.text;
    });
    _tmController.addListener(() {
      timesheetData.tm = _tmController.text;
    });
    _jobSizeController.addListener(() {
      timesheetData.jobSize = _jobSizeController.text;
    });
    _materialController.addListener(() {
      timesheetData.material = _materialController.text;
    });
    _jobDescController.addListener(() {
      timesheetData.jobDesc = _jobDescController.text;
    });
    _foremanController.addListener(() {
      timesheetData.foreman = _foremanController.text;
    });
    _vehicleController.addListener(() {
      timesheetData.vehicle = _vehicleController.text;
    });
  }

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();

    if (!_initialized) {
      final args =
          ModalRoute.of(context)?.settings.arguments as Map<String, dynamic>?;

      if (args != null) {
        _editMode = args['editMode'] ?? false;
        _docId = args['docId'] ?? '';
        // Se vier com um TimesheetData
        timesheetData = args['timesheetData'] ?? TimesheetData();
      } else {
        timesheetData = TimesheetData();
      }

      // Se for edição, carregamos do Firestore para popular
      if (_editMode && _docId.isNotEmpty) {
        _loadExistingTimesheet(_docId);
      } else {
        // Caso contrário, apenas inicializamos localmente
        _populateFieldsFromTimesheetData();
      }

      _initialized = true;
    }
  }

  Future<void> _loadExistingTimesheet(String docId) async {
    try {
      final doc = await FirebaseFirestore.instance
          .collection('timesheets')
          .doc(docId)
          .get();

      if (doc.exists) {
        final data = doc.data()!;
        // Preenche os controladores/fields bÃ¡sicos
        _jobNameController.text = data['jobName'] ?? '';
        _dateController.text = data['date'] ?? '';
        _tmController.text = data['tm'] ?? '';
        _jobSizeController.text = data['jobSize'] ?? '';
        _materialController.text = data['material'] ?? '';
        _jobDescController.text = data['jobDesc'] ?? '';
        _foremanController.text = data['foreman'] ?? '';
        _vehicleController.text = data['vehicle'] ?? '';
        timesheetData.notes = data['notes'] ?? '';

        // Carrega lista de workers
        final List<dynamic> workersRaw = data['workers'] ?? [];
        timesheetData.workers = workersRaw.map((item) {
          final mapItem = item as Map<String, dynamic>;
          return {
            'name': mapItem['name']?.toString() ?? '',
            'start': mapItem['start']?.toString() ?? '',
            'finish': mapItem['finish']?.toString() ?? '',
            'hours': mapItem['hours']?.toString() ?? '',
            'travel': mapItem['travel']?.toString() ?? '',
            'meal': mapItem['meal']?.toString() ?? '',
          };
        }).toList();
      } else {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Timesheet não encontrado.')),
        );
      }
    } catch (error) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Erro ao carregar timesheet: $error')),
      );
    }
  }

  // Caso queiramos popular os fields a partir do timesheetData,
  // isso é útil para "voltar" do AddWorkersScreen mantendo tudo.
  void _populateFieldsFromTimesheetData() {
    _jobNameController.text = timesheetData.jobName;
    _dateController.text = timesheetData.date;
    _tmController.text = timesheetData.tm;
    _jobSizeController.text = timesheetData.jobSize;
    _materialController.text = timesheetData.material;
    _jobDescController.text = timesheetData.jobDesc;
    _foremanController.text = timesheetData.foreman;
    _vehicleController.text = timesheetData.vehicle;
  }

  @override
  void dispose() {
    _jobNameController.dispose();
    _dateController.dispose();
    _tmController.dispose();
    _jobSizeController.dispose();
    _materialController.dispose();
    _jobDescController.dispose();
    _foremanController.dispose();
    _vehicleController.dispose();
    super.dispose();
  }

  void _handleClear() {
    setState(() {
      _jobNameController.clear();
      _dateController.clear();
      _tmController.clear();
      _jobSizeController.clear();
      _materialController.clear();
      _jobDescController.clear();
      _foremanController.clear();
      _vehicleController.clear();
      timesheetData.notes = '';
      _showJobNameError = false;
      _showDateError = false;
      _showJobDescError = false;
    });
  }

  bool _validateRequiredFields() {
    final jobNameEmpty = _jobNameController.text.trim().isEmpty;
    final dateEmpty = _dateController.text.trim().isEmpty;
    final jobDescEmpty = _jobDescController.text.trim().isEmpty;

    setState(() {
      _showJobNameError = jobNameEmpty;
      _showDateError = dateEmpty;
      _showJobDescError = jobDescEmpty;
    });

    return !(jobNameEmpty || dateEmpty || jobDescEmpty);
  }

  void _handleNext() {
    if (_validateRequiredFields()) {
      // Mandamos para AddWorkersScreen
      Navigator.pushNamed(
        context,
        '/add-workers',
        arguments: {
          'editMode': _editMode,
          'docId': _docId,
          'timesheetData': timesheetData,
        },
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return BaseLayout(
      title: "Timesheet",
      child: SingleChildScrollView(
        padding: const EdgeInsets.symmetric(vertical: 16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.center,
          children: [
            const Center(child: TitleBox(title: "New Time Sheet")),
            const SizedBox(height: 20),
            const Center(
              child: Text(
                "Job's Info",
                style: TextStyle(
                  fontSize: 24,
                  fontWeight: FontWeight.bold,
                  color: Colors.black,
                ),
              ),
            ),
            const SizedBox(height: 20),
            CustomInputField(
              controller: _jobNameController,
              label: "Job Name",
              hintText: "Job Name",
              error: _showJobNameError,
            ),
            const SizedBox(height: 16),
            DatePickerInput(
              controller: _dateController,
              label: "Date",
              hintText: "Date",
              error: _showDateError,
            ),
            const SizedBox(height: 16),
            CustomInputField(
              controller: _tmController,
              label: "T.M.",
              hintText: "Territorial Manager",
            ),
            const SizedBox(height: 16),
            CustomInputField(
              controller: _jobSizeController,
              label: "Job Size",
              hintText: "Job Size",
            ),
            const SizedBox(height: 16),
            CustomMultilineInputField(
              controller: _materialController,
              label: "Material",
              hintText: "Material",
            ),
            const SizedBox(height: 16),
            CustomMultilineInputField(
              controller: _jobDescController,
              label: "Job Desc.",
              hintText: "Job Description",
              error: _showJobDescError,
            ),
            const SizedBox(height: 16),
            CustomInputField(
              controller: _foremanController,
              label: "Foreman",
              hintText: "Foreman",
            ),
            const SizedBox(height: 16),
            CustomInputField(
              controller: _vehicleController,
              label: "Vehicle",
              hintText: "Vehicle's Number",
            ),
            const SizedBox(height: 20),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceEvenly,
              children: [
                CustomButton(
                  type: ButtonType.cancelButton,
                  onPressed: () {
                    // Se quiser voltar pra Home
                    Navigator.pushReplacementNamed(context, '/home');
                  },
                ),
                CustomMiniButton(
                  type: MiniButtonType.clearMiniButton,
                  onPressed: _handleClear,
                ),
                CustomButton(
                  type: ButtonType.nextButton,
                  onPressed: _handleNext,
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }
}
import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:intl/intl.dart';
import '../widgets/base_layout.dart';
import '../widgets/title_box.dart';
import '../widgets/custom_button.dart';
import '../models/timesheet_data.dart';
import '../widgets/custom_button_mini.dart';

class TimesheetViewScreen extends StatelessWidget {
  const TimesheetViewScreen({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final args =
        ModalRoute.of(context)?.settings.arguments as Map<String, dynamic>?;
    final String docId =
        args != null && args.containsKey('docId') ? args['docId'] : '';
    return BaseLayout(
      title: "Timesheet",
      child: SingleChildScrollView(
        padding: const EdgeInsets.symmetric(vertical: 16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.center,
          children: [
            const Center(child: TitleBox(title: "Timesheet")),
            const SizedBox(height: 20),
            Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                CustomButton(
                  type: ButtonType.backButton,
                  onPressed: () {
                    Navigator.pop(context);
                  },
                ),
                const SizedBox(width: 20),
                CustomButton(
                  type: ButtonType.editButton,
                  onPressed: () {
                    if (docId.isNotEmpty) {
                      Navigator.pushNamed(
                        context,
                        '/new-time-sheet',
                        arguments: {'editMode': true, 'docId': docId},
                      );
                    } else {
                      ScaffoldMessenger.of(context).showSnackBar(
                        const SnackBar(
                          content: Text('Invalid ID for editing.'),
                        ),
                      );
                    }
                  },
                ),
              ],
            ),
            const SizedBox(height: 20),
            if (docId.isEmpty)
              const Text("Timesheet not found or empty ID.")
            else
              StreamBuilder<DocumentSnapshot>(
                stream: FirebaseFirestore.instance
                    .collection('timesheets')
                    .doc(docId)
                    .snapshots(),
                builder: (context, snapshot) {
                  if (snapshot.hasError) {
                    return Text('Error loading: ${snapshot.error}');
                  }
                  if (snapshot.connectionState == ConnectionState.waiting) {
                    return const Center(child: CircularProgressIndicator());
                  }
                  if (!snapshot.hasData || !snapshot.data!.exists) {
                    return const Text("This timesheet was not found.");
                  }

                  final doc = snapshot.data!;
                  final jobName = doc.get('jobName') ?? '';
                  final dateField = doc.get('date');
                  String date;
                  if (dateField is Timestamp) {
                    date =
                        DateFormat("M/d/yy, EEEE").format(dateField.toDate());
                  } else {
                    date = dateField.toString();
                  }
                  final tm = doc.get('tm') ?? '';
                  final jobSize = doc.get('jobSize') ?? '';
                  final material = doc.get('material') ?? '';
                  final jobDesc = doc.get('jobDesc') ?? '';
                  final foreman = doc.get('foreman') ?? '';
                  final vehicle = doc.get('vehicle') ?? '';
                  final notes = doc.get('notes') ?? '';

                  final List<dynamic> workersRaw = doc.get('workers') ?? [];
                  final List<Map<String, String>> workers =
                      workersRaw.map((item) {
                    final mapItem = item as Map<String, dynamic>;
                    return {
                      'name': mapItem['name']?.toString() ?? '',
                      'start': mapItem['start']?.toString() ?? '',
                      'finish': mapItem['finish']?.toString() ?? '',
                      'hours': mapItem['hours']?.toString() ?? '',
                      'travel': mapItem['travel']?.toString() ?? '',
                      'meal': mapItem['meal']?.toString() ?? '',
                    };
                  }).toList();

                  final timesheetData = TimesheetData(
                    jobName: jobName,
                    date: date,
                    tm: tm,
                    jobSize: jobSize,
                    material: material,
                    jobDesc: jobDesc,
                    foreman: foreman,
                    vehicle: vehicle,
                    notes: notes,
                    workers: workers,
                  );

                  return Column(
                    children: [
                      _buildReviewLayout(timesheetData),
                      const SizedBox(height: 20),
                      CustomMiniButton(
                        type: MiniButtonType.deleteMiniButton,
                        onPressed: () => _confirmDelete(context, docId),
                      ),
                    ],
                  );
                },
              ),
          ],
        ),
      ),
    );
  }

  void _confirmDelete(BuildContext context, String docId) {
    showDialog(
      context: context,
      builder: (ctx) {
        return AlertDialog(
          title: const Text("Delete Timesheet"),
          content: const Text(
            "Are you sure you want to delete this timesheet? This action cannot be undone.",
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(ctx),
              child: const Text("Cancel"),
            ),
            TextButton(
              onPressed: () {
                Navigator.pop(ctx);
                _deleteTimesheet(context, docId);
              },
              style: TextButton.styleFrom(foregroundColor: Colors.red),
              child: const Text("Delete"),
            ),
          ],
        );
      },
    );
  }

  Future<void> _deleteTimesheet(BuildContext context, String docId) async {
    try {
      await FirebaseFirestore.instance
          .collection('timesheets')
          .doc(docId)
          .delete();
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text("Timesheet deleted successfully.")),
      );
      Navigator.pop(context);
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text("Error deleting timesheet: $e")),
      );
    }
  }

  Widget _buildReviewLayout(TimesheetData data) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.center,
      children: [
        Container(
          width: 292,
          decoration: BoxDecoration(
            border: Border.all(color: Colors.black, width: 0.5),
          ),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              _buildTitleTimeSheet("TIME SHEET"),
              _drawHorizontalLine(),
              _buildLineJobName("JOB NAME:", data.jobName),
              _drawHorizontalLine(),
              _buildLineDateTmRow(data.date, data.tm),
              _drawHorizontalLine(),
              _buildLineJobSize("JOB SIZE:", data.jobSize),
              _drawHorizontalLine(),
              _buildLineMaterialRow("MATERIAL:", data.material),
              _drawHorizontalLine(),
              _buildLineJobDesc("JOB DESC.:", data.jobDesc),
              _drawHorizontalLine(),
              _buildLineForemanVehicle(data.foreman, data.vehicle),
              _drawHorizontalLine(),
              if (data.workers.isEmpty)
                _buildLineText("No Workers added.", "")
              else
                _buildWorkersTable(data.workers),
            ],
          ),
        ),
        if (data.notes.isNotEmpty) ...[
          const SizedBox(height: 8),
          Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              SizedBox(
                width: 292,
                child: Row(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const Text(
                      "Note: ",
                      style: TextStyle(fontSize: 11),
                    ),
                    Expanded(
                      child: Text(
                        data.notes,
                        style: const TextStyle(fontSize: 11),
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),
        ],
      ],
    );
  }

  Widget _buildTitleTimeSheet(String text) {
    return Container(
      width: 290,
      height: 24,
      alignment: Alignment.center,
      child: Text(
        text,
        style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
      ),
    );
  }

  Widget _drawHorizontalLine() {
    return Container(height: 0.5, color: Colors.black);
  }

  Widget _buildLineJobName(String label, String value) {
    return SizedBox(
      height: 18,
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.center,
        children: [
          SizedBox(
            width: 64,
            child: Text(
              label,
              style: const TextStyle(fontSize: 11, fontWeight: FontWeight.bold),
              textAlign: TextAlign.center,
              overflow: TextOverflow.ellipsis,
            ),
          ),
          SizedBox(
            width: 227,
            child: Text(
              value,
              style: const TextStyle(fontSize: 11),
              textAlign: TextAlign.left,
              overflow: TextOverflow.ellipsis,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildLineDateTmRow(String dateValue, String tmValue) {
    return SizedBox(
      height: 18,
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.center,
        children: [
          SizedBox(
            width: 36,
            child: Text(
              "DATE:",
              style: const TextStyle(fontSize: 11, fontWeight: FontWeight.bold),
              textAlign: TextAlign.center,
              overflow: TextOverflow.ellipsis,
            ),
          ),
          SizedBox(
            width: 133,
            child: Text(
              dateValue,
              style: const TextStyle(fontSize: 11),
              textAlign: TextAlign.left,
              overflow: TextOverflow.ellipsis,
            ),
          ),
          Container(width: 0.5, color: Colors.black),
          SizedBox(
            width: 31,
            child: Text(
              "T.M.:",
              style: const TextStyle(fontSize: 11, fontWeight: FontWeight.bold),
              textAlign: TextAlign.center,
              overflow: TextOverflow.ellipsis,
            ),
          ),
          SizedBox(
            width: 90,
            child: Text(
              tmValue,
              style: const TextStyle(fontSize: 11),
              textAlign: TextAlign.left,
              overflow: TextOverflow.ellipsis,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildLineJobSize(String label, String value) {
    return SizedBox(
      height: 18,
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.center,
        children: [
          SizedBox(
            width: 56,
            child: Text(
              label,
              style: const TextStyle(fontSize: 11, fontWeight: FontWeight.bold),
              textAlign: TextAlign.center,
              overflow: TextOverflow.ellipsis,
            ),
          ),
          SizedBox(
            width: 234,
            child: Text(
              value,
              style: const TextStyle(fontSize: 11),
              textAlign: TextAlign.left,
              overflow: TextOverflow.ellipsis,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildLineMaterialRow(String label, String value) {
    return Container(
      constraints: const BoxConstraints(minHeight: 52),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.center,
        children: [
          SizedBox(
            width: 66,
            child: Text(
              label,
              style: const TextStyle(fontSize: 11, fontWeight: FontWeight.bold),
              textAlign: TextAlign.center,
              overflow: TextOverflow.ellipsis,
            ),
          ),
          SizedBox(
            width: 224,
            child: Text(
              value,
              style: const TextStyle(fontSize: 11),
              textAlign: TextAlign.left,
              overflow: TextOverflow.visible,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildLineJobDesc(String label, String value) {
    return Container(
      constraints: const BoxConstraints(minHeight: 52),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.center,
        children: [
          SizedBox(
            width: 66,
            child: Text(
              label,
              style: const TextStyle(fontSize: 11, fontWeight: FontWeight.bold),
              textAlign: TextAlign.center,
              overflow: TextOverflow.ellipsis,
            ),
          ),
          SizedBox(
            width: 224,
            child: Text(
              value,
              style: const TextStyle(fontSize: 11),
              textAlign: TextAlign.left,
              overflow: TextOverflow.visible,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildLineForemanVehicle(String foreman, String vehicle) {
    return SizedBox(
      height: 18,
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.center,
        children: [
          SizedBox(
            width: 64,
            child: Text(
              "FOREMAN:",
              style: const TextStyle(fontSize: 11, fontWeight: FontWeight.bold),
              textAlign: TextAlign.center,
              overflow: TextOverflow.ellipsis,
            ),
          ),
          SizedBox(
            width: 118,
            child: Text(
              foreman,
              style: const TextStyle(fontSize: 11),
              textAlign: TextAlign.left,
              overflow: TextOverflow.ellipsis,
            ),
          ),
          Container(width: 0.5, color: Colors.black),
          SizedBox(
            width: 52,
            child: Text(
              "VEHICLE:",
              style: const TextStyle(fontSize: 11, fontWeight: FontWeight.bold),
              textAlign: TextAlign.center,
              overflow: TextOverflow.ellipsis,
            ),
          ),
          SizedBox(
            width: 56,
            child: Text(
              vehicle,
              style: const TextStyle(fontSize: 11),
              textAlign: TextAlign.left,
              overflow: TextOverflow.ellipsis,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildLineText(String label, String value, {bool multiLine = false}) {
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 8),
      constraints: const BoxConstraints(minHeight: 18),
      child: Row(
        crossAxisAlignment:
            multiLine ? CrossAxisAlignment.start : CrossAxisAlignment.center,
        children: [
          Text(
            label,
            style: const TextStyle(fontSize: 11, fontWeight: FontWeight.bold),
            textAlign: TextAlign.center,
          ),
          const SizedBox(width: 6),
          Expanded(
            child: Text(
              value,
              style: const TextStyle(fontSize: 11),
              textAlign: TextAlign.left,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildWorkersTable(List<Map<String, String>> workers) {
    final rows = <TableRow>[
      TableRow(
        decoration: const BoxDecoration(color: Color(0xFFEFEFEF)),
        children: [
          _buildHeaderCell("NAME", fontSize: 11, textAlign: TextAlign.center),
          _buildHeaderCell("START", fontSize: 8, textAlign: TextAlign.center),
          _buildHeaderCell("FINISH", fontSize: 8, textAlign: TextAlign.center),
          _buildHeaderCell("HOUR", fontSize: 8, textAlign: TextAlign.center),
          _buildHeaderCell("TRAVEL", fontSize: 7, textAlign: TextAlign.center),
          _buildHeaderCell("MEAL", fontSize: 8, textAlign: TextAlign.center),
        ],
      ),
      for (final w in workers)
        TableRow(
          children: [
            _buildDataCell(w['name'] ?? '',
                fontSize: 11, textAlign: TextAlign.left),
            _buildDataCell(w['start'] ?? '',
                fontSize: 11, textAlign: TextAlign.center),
            _buildDataCell(w['finish'] ?? '',
                fontSize: 11, textAlign: TextAlign.center),
            _buildDataCell(w['hours'] ?? '',
                fontSize: 11, textAlign: TextAlign.center),
            _buildDataCell(w['travel'] ?? '',
                fontSize: 11, textAlign: TextAlign.center),
            _buildDataCell(w['meal'] ?? '',
                fontSize: 11, textAlign: TextAlign.center),
          ],
        ),
    ];
    for (int i = 0; i < 4; i++) {
      rows.add(
        TableRow(
          children: [
            for (int c = 0; c < 6; c++)
              _buildDataCell('', fontSize: 11, textAlign: TextAlign.left),
          ],
        ),
      );
    }
    return SizedBox(
      width: 290,
      child: Table(
        border: TableBorder(
          top: const BorderSide(width: 0, color: Colors.transparent),
          left: const BorderSide(width: 0, color: Colors.transparent),
          right: const BorderSide(width: 0, color: Colors.transparent),
          bottom: const BorderSide(width: 0, color: Colors.transparent),
          horizontalInside: const BorderSide(width: 0.5, color: Colors.black),
          verticalInside: const BorderSide(width: 0.5, color: Colors.black),
        ),
        columnWidths: const {
          0: FixedColumnWidth(120),
          1: FixedColumnWidth(40),
          2: FixedColumnWidth(40),
          3: FixedColumnWidth(30),
          4: FixedColumnWidth(33),
          5: FixedColumnWidth(28),
        },
        children: rows,
      ),
    );
  }

  Widget _buildHeaderCell(String text,
      {required double fontSize, required TextAlign textAlign}) {
    return Container(
      alignment: Alignment.center,
      height: 18,
      child: Text(
        text,
        style: TextStyle(
          fontFamily: 'Barlow',
          fontSize: fontSize,
          fontWeight: FontWeight.bold,
          color: const Color(0xFF3B3B3B),
        ),
        textAlign: textAlign,
      ),
    );
  }

  Widget _buildDataCell(String text,
      {required double fontSize, required TextAlign textAlign}) {
    return Container(
      alignment: Alignment.center,
      height: 18,
      child: Text(
        text,
        style: TextStyle(
          fontFamily: 'Barlow',
          fontSize: fontSize,
          color: const Color(0xFF3B3B3B),
        ),
        textAlign: textAlign,
      ),
    );
  }
}
import 'package:flutter/material.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import '../widgets/base_layout.dart';
import '../widgets/title_box.dart';
import '../widgets/custom_button.dart';

class SettingsScreen extends StatefulWidget {
  const SettingsScreen({Key? key}) : super(key: key);

  @override
  State<SettingsScreen> createState() => _SettingsScreenState();
}

class _SettingsScreenState extends State<SettingsScreen> {
  String _fullName = "";
  String _email = "";
  String _role = "User";
  bool _isLoadingUser = true;

  @override
  void initState() {
    super.initState();
    _loadUserInfo();
  }

  Future<void> _loadUserInfo() async {
    try {
      final user = FirebaseAuth.instance.currentUser;
      if (user == null) {
        setState(() {
          _isLoadingUser = false;
        });
        return;
      }
      final doc = await FirebaseFirestore.instance
          .collection("users")
          .doc(user.uid)
          .get();

      if (doc.exists) {
        final data = doc.data()!;
        final firstName = data["firstName"] ?? "";
        final lastName = data["lastName"] ?? "";
        final fullName = (firstName + " " + lastName).trim();
        final email = data["email"] ?? user.email ?? "";
        final role = data["role"] ?? "User";

        setState(() {
          _fullName = fullName.isEmpty ? "Unknown user" : fullName;
          _email = email;
          _role = role;
          _isLoadingUser = false;
        });
      } else {
        setState(() {
          _fullName = user.email ?? "Unknown";
          _email = user.email ?? "no-email";
          _role = "User";
          _isLoadingUser = false;
        });
      }
    } catch (e) {
      setState(() {
        _fullName = "Error loading user";
        _email = "";
        _role = "";
        _isLoadingUser = false;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return BaseLayout(
      title: "Timesheet",
      child: SingleChildScrollView(
        padding: const EdgeInsets.symmetric(vertical: 16),
        child: Column(
          children: [
            const TitleBox(title: "Settings"),
            const SizedBox(height: 20),
            _isLoadingUser
                ? const Center(child: CircularProgressIndicator())
                : _buildUserInfoBox(),
            const SizedBox(height: 20),

            // Exibe a Row apenas se for Admin:
            if (_role == "Admin")
              Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  CustomButton(
                    type: ButtonType.usersButton,
                    onPressed: () {
                      Navigator.pushNamed(context, '/users');
                    },
                  ),
                  const SizedBox(width: 20),
                  CustomButton(
                    type: ButtonType.workersButton,
                    onPressed: () {
                      Navigator.pushNamed(context, '/workers');
                    },
                  ),
                  const SizedBox(width: 20),
                  // Novo botão "Cards"
                  CustomButton(
                    type: ButtonType.cardsButton,
                    onPressed: () {
                      Navigator.pushNamed(context, '/cards');
                    },
                  ),
                ],
              ),
          ],
        ),
      ),
    );
  }

  Widget _buildUserInfoBox() {
    return Container(
      width: 330,
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: const Color(0xFFFFFFD0),
        border: Border.all(
          color: const Color(0xFF0205D3),
          width: 2,
        ),
        borderRadius: BorderRadius.circular(5),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            _fullName,
            style: const TextStyle(
              fontSize: 18,
              fontWeight: FontWeight.bold,
              color: Color(0xFF0205D3),
            ),
          ),
          const SizedBox(height: 6),
          Text(
            _email,
            style: const TextStyle(
              fontSize: 14,
              color: Colors.black87,
            ),
          ),
          const SizedBox(height: 6),
          Text(
            _role, // "Admin" ou "User"
            style: const TextStyle(
              fontSize: 14,
              fontWeight: FontWeight.w600,
              color: Colors.black87,
            ),
          ),
        ],
      ),
    );
  }
}
import 'dart:io';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:firebase_storage/firebase_storage.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:path/path.dart' as p;
import 'package:intl/intl.dart'; // Adicione esse import

import '../widgets/base_layout.dart';
import '../widgets/title_box.dart';
import '../widgets/custom_input_field.dart';
import '../widgets/custom_multiline_input_field.dart';
import '../widgets/date_picker_input.dart';
import '../widgets/custom_button.dart';
import '../widgets/custom_dropdown_field.dart';

class USDCurrencyInputFormatter extends TextInputFormatter {
  @override
  TextEditingValue formatEditUpdate(
    TextEditingValue oldValue,
    TextEditingValue newValue,
  ) {
    String digits = newValue.text.replaceAll(RegExp(r'[^0-9]'), '');
    if (digits.isEmpty) digits = '0';
    int value = int.parse(digits);
    double dollars = value / 100.0;
    String newText = "\$" + dollars.toStringAsFixed(2);
    return TextEditingValue(
      text: newText,
      selection: TextSelection.collapsed(offset: newText.length),
    );
  }
}

class PreviewReceiptScreen extends StatefulWidget {
  const PreviewReceiptScreen({Key? key}) : super(key: key);

  @override
  _PreviewReceiptScreenState createState() => _PreviewReceiptScreenState();
}

class _PreviewReceiptScreenState extends State<PreviewReceiptScreen> {
  final TextEditingController _cardLast4Controller = TextEditingController();
  final TextEditingController _dateController = TextEditingController();
  final TextEditingController _amountController = TextEditingController();
  final TextEditingController _descriptionController = TextEditingController();

  DateTime? _selectedDate;
  bool _isUploading = false;
  List<Map<String, String>> _activeCards = [];
  String? _selectedCardOption;

  @override
  void initState() {
    super.initState();
    _loadActiveCards();
  }

  Future<void> _loadActiveCards() async {
    try {
      final snap = await FirebaseFirestore.instance
          .collection('cards')
          .where('status', isEqualTo: 'ativo')
          .get();

      final List<Map<String, String>> loaded = [];
      for (var doc in snap.docs) {
        final data = doc.data();
        final last4 = data['last4Digits']?.toString() ?? '';
        final holder = data['cardholderName']?.toString() ?? '';
        if (last4.isNotEmpty) {
          loaded.add({
            'last4': last4,
            'cardholderName': holder,
          });
        }
      }
      setState(() {
        _activeCards = loaded;
      });
    } catch (e) {
      print("Erro ao carregar cartões ativos: $e");
    }
  }

  @override
  Widget build(BuildContext context) {
    final args =
        ModalRoute.of(context)?.settings.arguments as Map<String, dynamic>?;
    final String? imagePath = args?['imagePath'];

    return BaseLayout(
      title: "Timesheet",
      child: SingleChildScrollView(
        padding: const EdgeInsets.symmetric(vertical: 16),
        child: Column(
          children: [
            const Center(child: TitleBox(title: "New Receipt")),
            const SizedBox(height: 20),
            _buildCardLast4Dropdown(),
            const SizedBox(height: 16),
            DatePickerInput(
              label: "Purchase date",
              hintText: "Select purchase date",
              controller: _dateController,
              onDateSelected: (picked) => _selectedDate = picked,
            ),
            const SizedBox(height: 16),
            CustomInputField(
              label: "Amount",
              hintText: "\$0.00",
              controller: _amountController,
              keyboardType:
                  const TextInputType.numberWithOptions(decimal: true),
              inputFormatters: [USDCurrencyInputFormatter()],
            ),
            const SizedBox(height: 16),
            CustomMultilineInputField(
              label: "Description",
              hintText: "Description of the purchase",
              controller: _descriptionController,
            ),
            const SizedBox(height: 20),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceEvenly,
              children: [
                CustomButton(
                  type: ButtonType.cancelButton,
                  onPressed: () {
                    Navigator.pop(context);
                  },
                ),
                _isUploading
                    ? const CircularProgressIndicator()
                    : CustomButton(
                        type: ButtonType.uploadReceiptButton,
                        onPressed: () {
                          _attemptUpload(imagePath);
                        },
                      ),
              ],
            ),
            const SizedBox(height: 20),
            Visibility(
              visible:
                  false, // Define como false para ocultar o botão e colapsá-lo
              replacement: const SizedBox.shrink(),
              child: ElevatedButton(
                onPressed: _convertDatesToTimestamps,
                child: const Text("Converter Datas para Timestamp"),
              ),
            ),
            const SizedBox(height: 20),
            if (imagePath != null && imagePath.isNotEmpty)
              Padding(
                padding: const EdgeInsets.symmetric(horizontal: 8),
                child: Image.file(
                  File(imagePath),
                  fit: BoxFit.contain,
                  width: double.infinity,
                ),
              )
            else
              const Text(
                "No image captured.",
                style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
              ),
            const SizedBox(height: 20),
          ],
        ),
      ),
    );
  }

  Future<void> _convertDatesToTimestamps() async {
    try {
      final collection = FirebaseFirestore.instance.collection('receipts');
      final querySnapshot = await collection.get();

      // Define o formatador para "M/d/yy" (exemplo: "4/12/25")
      final DateFormat formatter = DateFormat("M/d/yy");

      for (final doc in querySnapshot.docs) {
        final data = doc.data();
        final dateField = data['date'];

        // Verifica se o campo 'date' é String
        if (dateField is String) {
          // Separa o dia, usando apenas a parte antes da vírgula
          final String dateToParse = dateField.split(',')[0];
          try {
            DateTime parsedDate = formatter.parse(dateToParse);
            final Timestamp timestamp = Timestamp.fromDate(parsedDate);
            // Atualiza o documento com o valor convertido
            await doc.reference.update({'date': timestamp});
          } catch (e) {
            print("Erro ao converter data para doc ${doc.id}: $e");
          }
        }
      }

      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text("Datas convertidas com sucesso!")),
      );
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text("Falha ao converter datas: $e")),
      );
    }
  }

  Widget _buildCardLast4Dropdown() {
    final List<String> dropdownItems = _activeCards.isNotEmpty
        ? _activeCards.map((map) {
            final last4 = map['last4'] ?? '';
            final holder = map['cardholderName'] ?? '';
            return "$last4 - $holder";
          }).toList()
        : [];

    return CustomDropdownField(
      label: "Last 4 digits",
      hintText: "Select the card",
      items: dropdownItems,
      value: _selectedCardOption,
      onChanged: (newValue) {
        setState(() {
          _selectedCardOption = newValue;
          if (newValue != null && newValue.contains(' - ')) {
            final parts = newValue.split(' - ');
            _cardLast4Controller.text = parts[0];
          } else {
            _cardLast4Controller.clear();
          }
        });
      },
    );
  }

  void _attemptUpload(String? imagePath) {
    if (_cardLast4Controller.text.trim().isEmpty ||
        _selectedDate == null ||
        _amountController.text.trim().isEmpty ||
        imagePath == null ||
        imagePath.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text(
              "Last 4 digits, Purchase date, Amount, and Image are required."),
        ),
      );
      return;
    }
    uploadReceipt(File(imagePath));
  }

  Future<void> uploadReceipt(File imageFile) async {
    setState(() {
      _isUploading = true;
    });
    try {
      final user = FirebaseAuth.instance.currentUser;
      if (user == null) throw "User not logged in.";
      final fileName = p.basename(imageFile.path);
      final storageRef =
          FirebaseStorage.instance.ref().child("receipts/$fileName");
      final snapshot = await storageRef.putFile(imageFile);
      final imageUrl = await snapshot.ref.getDownloadURL();

      await FirebaseFirestore.instance.collection("receipts").add({
        "userId": user.uid,
        "cardLast4": _cardLast4Controller.text.trim(),
        "date": Timestamp.fromDate(_selectedDate!),
        "amount": _amountController.text.trim(),
        "description": _descriptionController.text.trim(),
        "imageUrl": imageUrl,
        "timestamp": FieldValue.serverTimestamp(),
      });

      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text("Receipt uploaded successfully!")),
      );

      Navigator.pushNamedAndRemoveUntil(
        context,
        '/receipts',
        (route) => false,
      );
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text("Upload failed: $e")),
      );
    } finally {
      setState(() {
        _isUploading = false;
      });
    }
  }
}
import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import '../widgets/base_layout.dart';
import '../widgets/title_box.dart';
import '../widgets/custom_button.dart';
import '../widgets/custom_input_field.dart';
import '../widgets/custom_button_mini.dart';

class WorkersScreen extends StatefulWidget {
  const WorkersScreen({Key? key}) : super(key: key);

  @override
  State<WorkersScreen> createState() => _WorkersScreenState();
}

class _WorkersScreenState extends State<WorkersScreen> {
  bool _showForm = false;
  final _firstNameController = TextEditingController();
  final _lastNameController = TextEditingController();

  String _statusFilter = "all"; // "all", "active", "inactive"

  void _handleAddWorker() {
    setState(() {
      _showForm = true;
    });
  }

  void _handleCancel() {
    setState(() {
      _showForm = false;
      _firstNameController.clear();
      _lastNameController.clear();
    });
  }

  Future<void> _handleSave() async {
    final firstName = _firstNameController.text.trim();
    final lastName = _lastNameController.text.trim();

    if (firstName.isEmpty || lastName.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('Preencha todos os campos antes de salvar.'),
        ),
      );
      return;
    }

    try {
      final docRef = FirebaseFirestore.instance.collection('workers').doc();
      await docRef.set({
        'uniqueId': docRef.id,
        'firstName': firstName,
        'lastName': lastName,
        'status': 'ativo', // valor padrão
        'createdAt': FieldValue.serverTimestamp(),
      });

      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Worker salvo com sucesso!')),
      );

      setState(() {
        _showForm = false;
        _firstNameController.clear();
        _lastNameController.clear();
      });
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Erro ao salvar: $e')),
      );
    }
  }

  void _showStatusDialog(
    String docId,
    String firstName,
    String lastName,
    String currentStatus,
  ) {
    String newStatus = currentStatus;

    showDialog(
      context: context,
      builder: (ctx) {
        return AlertDialog(
          backgroundColor: Colors.white,
          shape: RoundedRectangleBorder(
            side: const BorderSide(color: Color(0xFF0205D3), width: 2),
            borderRadius: BorderRadius.circular(5),
          ),
          content: StatefulBuilder(
            builder: (BuildContext context, StateSetter setDialogState) {
              return Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  Text(
                    "$firstName $lastName",
                    textAlign: TextAlign.center,
                    style: const TextStyle(
                      fontSize: 16,
                      fontWeight: FontWeight.bold,
                      color: Colors.black87,
                    ),
                  ),
                  const SizedBox(height: 10),
                  Container(
                    padding: const EdgeInsets.symmetric(horizontal: 6),
                    decoration: BoxDecoration(
                      color: const Color(0xFFFFFDD0),
                      border: Border.all(
                        color: const Color(0xFF0205D3),
                        width: 2,
                      ),
                      borderRadius: BorderRadius.circular(4),
                    ),
                    child: DropdownButtonHideUnderline(
                      child: DropdownButton<String>(
                        value: newStatus,
                        style:
                            const TextStyle(fontSize: 14, color: Colors.black),
                        items: const [
                          DropdownMenuItem<String>(
                            value: 'ativo',
                            child: Text('Active'),
                          ),
                          DropdownMenuItem<String>(
                            value: 'inativo',
                            child: Text('Inactive'),
                          ),
                        ],
                        onChanged: (val) {
                          if (val != null) {
                            setDialogState(() {
                              newStatus = val;
                            });
                          }
                        },
                      ),
                    ),
                  ),
                ],
              );
            },
          ),
          actionsAlignment: MainAxisAlignment.center,
          actions: [
            CustomMiniButton(
              type: MiniButtonType.cancelMiniButton,
              onPressed: () {
                Navigator.pop(context);
              },
            ),
            const SizedBox(width: 10),
            CustomMiniButton(
              type: MiniButtonType.saveMiniButton,
              onPressed: () async {
                try {
                  await FirebaseFirestore.instance
                      .collection('workers')
                      .doc(docId)
                      .update({'status': newStatus});

                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(
                        content: Text('Status atualizado para "$newStatus"!')),
                  );
                } catch (e) {
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(content: Text('Erro ao atualizar status: $e')),
                  );
                }
                Navigator.pop(context);
              },
            ),
          ],
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return BaseLayout(
      title: "Timesheet",
      child: SingleChildScrollView(
        padding: const EdgeInsets.symmetric(vertical: 16),
        child: Column(
          children: [
            const TitleBox(title: "Workers"),
            const SizedBox(height: 20),

            // Botão Add Worker ou formulário
            if (!_showForm)
              CustomButton(
                type: ButtonType.addWorkerButton,
                onPressed: _handleAddWorker,
              )
            else
              _buildAddWorkerForm(),

            const SizedBox(height: 20),

            // Dropdown alinhado à direita
            Align(
              alignment: Alignment.centerRight,
              child: Container(
                margin: const EdgeInsets.only(right: 20),
                height: 40,
                padding: const EdgeInsets.symmetric(horizontal: 6),
                decoration: BoxDecoration(
                  color: Colors.white,
                  border: Border.all(color: const Color(0xFF0205D3), width: 2),
                  borderRadius: BorderRadius.circular(4),
                ),
                child: DropdownButtonHideUnderline(
                  child: DropdownButton<String>(
                    value: _statusFilter,
                    style: const TextStyle(fontSize: 14, color: Colors.black),
                    items: const [
                      DropdownMenuItem(
                        value: 'all',
                        child: Text('All'),
                      ),
                      DropdownMenuItem(
                        value: 'active',
                        child: Text('Active'),
                      ),
                      DropdownMenuItem(
                        value: 'inactive',
                        child: Text('Inactive'),
                      ),
                    ],
                    onChanged: (String? value) {
                      if (value != null) {
                        setState(() {
                          _statusFilter = value;
                        });
                      }
                    },
                  ),
                ),
              ),
            ),

            const SizedBox(height: 20),

            StreamBuilder<QuerySnapshot>(
              stream: FirebaseFirestore.instance
                  .collection('workers')
                  .orderBy('createdAt', descending: true)
                  .snapshots(),
              builder: (context, snapshot) {
                if (snapshot.hasError) {
                  return const Text(
                    'Erro ao carregar Workers',
                    style: TextStyle(color: Colors.red),
                  );
                }
                if (snapshot.connectionState == ConnectionState.waiting) {
                  return const Center(child: CircularProgressIndicator());
                }

                final docs = snapshot.data?.docs ?? [];
                if (docs.isEmpty) {
                  return const Text('Nenhum worker encontrado.');
                }

                // Aplica o filtro de status
                List<DocumentSnapshot> filteredDocs = docs;
                if (_statusFilter == 'active') {
                  filteredDocs = docs
                      .where((doc) =>
                          (doc.data() as Map<String, dynamic>)['status'] ==
                          'ativo')
                      .toList();
                } else if (_statusFilter == 'inactive') {
                  filteredDocs = docs
                      .where((doc) =>
                          (doc.data() as Map<String, dynamic>)['status'] ==
                          'inativo')
                      .toList();
                }

                final double containerWidth =
                    MediaQuery.of(context).size.width - 60;

                return Container(
                  width: containerWidth < 0 ? 0 : containerWidth,
                  child: GridView.builder(
                    shrinkWrap: true,
                    physics: const NeverScrollableScrollPhysics(),
                    itemCount: filteredDocs.length,
                    gridDelegate:
                        const SliverGridDelegateWithFixedCrossAxisCount(
                      crossAxisCount: 2,
                      crossAxisSpacing: 12,
                      mainAxisSpacing: 12,
                      childAspectRatio: 2.5,
                    ),
                    itemBuilder: (context, index) {
                      final docData =
                          filteredDocs[index].data() as Map<String, dynamic>;
                      final docId = filteredDocs[index].id;
                      final firstName = docData['firstName'] ?? '';
                      final lastName = docData['lastName'] ?? '';
                      final status = docData['status'] ?? 'ativo';

                      return GestureDetector(
                        onTap: () {
                          _showStatusDialog(docId, firstName, lastName, status);
                        },
                        child: Container(
                          decoration: BoxDecoration(
                            color: const Color(0xFFFFFFD0),
                            border: Border.all(
                              color: const Color(0xFF0205D3),
                              width: 2,
                            ),
                            borderRadius: BorderRadius.circular(5),
                          ),
                          child: Center(
                            child: Padding(
                              padding: const EdgeInsets.symmetric(
                                horizontal: 6,
                                vertical: 4,
                              ),
                              child: Text(
                                '$firstName $lastName',
                                textAlign: TextAlign.center,
                                style: const TextStyle(
                                  fontSize: 14,
                                  fontWeight: FontWeight.w600,
                                ),
                                maxLines: 2,
                                overflow: TextOverflow.ellipsis,
                              ),
                            ),
                          ),
                        ),
                      );
                    },
                  ),
                );
              },
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildAddWorkerForm() {
    return Column(
      children: [
        CustomInputField(
          label: "First name",
          hintText: "Enter first name",
          controller: _firstNameController,
        ),
        const SizedBox(height: 10),
        CustomInputField(
          label: "Last name",
          hintText: "Enter last name",
          controller: _lastNameController,
        ),
        const SizedBox(height: 10),
        Row(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            CustomMiniButton(
              type: MiniButtonType.cancelMiniButton,
              onPressed: _handleCancel,
            ),
            const SizedBox(width: 10),
            CustomMiniButton(
              type: MiniButtonType.saveMiniButton,
              onPressed: _handleSave,
            ),
          ],
        ),
      ],
    );
  }
}
import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:intl/intl.dart';
import '../widgets/base_layout.dart';
import '../widgets/title_box.dart';
import '../widgets/custom_button.dart';
import '../widgets/custom_button_mini.dart';
import '../models/timesheet_data.dart';

class ReviewTimeSheetScreen extends StatefulWidget {
  const ReviewTimeSheetScreen({Key? key}) : super(key: key);

  @override
  State<ReviewTimeSheetScreen> createState() => _ReviewTimeSheetScreenState();
}

class _ReviewTimeSheetScreenState extends State<ReviewTimeSheetScreen> {
  bool _showNoteField = false;
  final TextEditingController _noteController = TextEditingController();

  Future<void> _submitTimesheet(
      TimesheetData timesheetData, bool editMode, String docId) async {
    try {
      final collection = FirebaseFirestore.instance.collection('timesheets');
      final userId = FirebaseAuth.instance.currentUser!.uid;

      // Converter o campo "date" para Timestamp
      final dynamic dateField = timesheetData.date;
      late final Timestamp timestampDate;
      if (dateField is String) {
        try {
          final DateTime parsedDate =
              DateFormat("M/d/yy, EEEE").parse(dateField);
          timestampDate = Timestamp.fromDate(parsedDate);
        } catch (e) {
          // Se ocorrer erro, usa o Timestamp atual
          timestampDate = Timestamp.now();
        }
      } else if (dateField is DateTime) {
        timestampDate = Timestamp.fromDate(dateField);
      } else if (dateField is Timestamp) {
        timestampDate = dateField;
      } else {
        timestampDate = Timestamp.now();
      }

      if (editMode && docId.isNotEmpty) {
        await collection.doc(docId).update({
          'jobName': timesheetData.jobName,
          'date': timestampDate,
          'tm': timesheetData.tm,
          'jobSize': timesheetData.jobSize,
          'material': timesheetData.material,
          'jobDesc': timesheetData.jobDesc,
          'foreman': timesheetData.foreman,
          'vehicle': timesheetData.vehicle,
          'notes': timesheetData.notes,
          'workers': timesheetData.workers,
          'userId': userId,
          'timestamp': FieldValue.serverTimestamp(),
        });
      } else {
        await collection.add({
          'jobName': timesheetData.jobName,
          'date': timestampDate,
          'tm': timesheetData.tm,
          'jobSize': timesheetData.jobSize,
          'material': timesheetData.material,
          'jobDesc': timesheetData.jobDesc,
          'foreman': timesheetData.foreman,
          'vehicle': timesheetData.vehicle,
          'notes': timesheetData.notes,
          'workers': timesheetData.workers,
          'userId': userId,
          'timestamp': FieldValue.serverTimestamp(),
        });
      }
      ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Timesheet salvo com sucesso!')));
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Erro ao enviar o timesheet: $e')));
    }
  }

  @override
  Widget build(BuildContext context) {
    final args =
        ModalRoute.of(context)?.settings.arguments as Map<String, dynamic>?;
    final bool editMode = args != null ? (args['editMode'] ?? false) : false;
    final String docId = args != null ? (args['docId'] ?? '') : '';
    final TimesheetData? timesheetData =
        args != null ? (args['timesheetData'] as TimesheetData?) : null;

    return BaseLayout(
      title: "Timesheet",
      child: SingleChildScrollView(
        padding: const EdgeInsets.symmetric(vertical: 16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.center,
          children: [
            const Center(child: TitleBox(title: "Review")),
            const SizedBox(height: 20),
            Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                CustomButton(
                  type: ButtonType.backButton,
                  onPressed: () {
                    if (timesheetData != null) {
                      Navigator.pushNamed(
                        context,
                        '/add-workers',
                        arguments: {
                          'editMode': editMode,
                          'docId': docId,
                          'timesheetData': timesheetData,
                        },
                      );
                    } else {
                      Navigator.pop(context);
                    }
                  },
                ),
              ],
            ),
            const SizedBox(height: 20),
            if (timesheetData == null)
              const Text("No Timesheet Data found.")
            else
              _buildReviewLayout(timesheetData),
            if (timesheetData != null && timesheetData.notes.isNotEmpty)
              Padding(
                padding: const EdgeInsets.only(top: 8.0),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    SizedBox(
                      width: 292,
                      child: Row(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          const Text(
                            "Note: ",
                            style: TextStyle(
                                fontSize: 11, fontWeight: FontWeight.normal),
                          ),
                          Expanded(
                            child: Text(
                              timesheetData.notes,
                              style: const TextStyle(
                                  fontSize: 11, fontWeight: FontWeight.normal),
                            ),
                          ),
                        ],
                      ),
                    ),
                  ],
                ),
              ),
            const SizedBox(height: 20),
            if (!_showNoteField)
              CustomMiniButton(
                type: MiniButtonType.noteMiniButton,
                onPressed: () {
                  setState(() {
                    _showNoteField = true;
                    if (timesheetData != null) {
                      _noteController.text = timesheetData.notes;
                    }
                  });
                },
              )
            else
              Column(
                children: [
                  Container(
                    width: 290,
                    height: 90,
                    decoration: BoxDecoration(
                      color: const Color(0xFFFFFFD0),
                      border:
                          Border.all(color: const Color(0xFF0205D3), width: 2),
                      borderRadius: BorderRadius.circular(5),
                    ),
                    padding: const EdgeInsets.symmetric(horizontal: 6),
                    child: TextField(
                      controller: _noteController,
                      maxLines: null,
                      expands: true,
                      style: const TextStyle(fontSize: 14),
                      decoration: const InputDecoration(
                        border: InputBorder.none,
                        hintText: "Add a note",
                      ),
                    ),
                  ),
                  const SizedBox(height: 8),
                  Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      CustomMiniButton(
                        type: MiniButtonType.cancelMiniButton,
                        onPressed: () {
                          setState(() {
                            _showNoteField = false;
                          });
                        },
                      ),
                      const SizedBox(width: 8),
                      CustomMiniButton(
                        type: MiniButtonType.clearMiniButton,
                        onPressed: () {
                          setState(() {
                            _noteController.clear();
                          });
                        },
                      ),
                      const SizedBox(width: 8),
                      CustomMiniButton(
                        type: MiniButtonType.saveMiniButton,
                        onPressed: () {
                          if (timesheetData != null) {
                            timesheetData.notes = _noteController.text;
                          }
                          setState(() {
                            _showNoteField = false;
                          });
                        },
                      ),
                    ],
                  ),
                ],
              ),
            const SizedBox(height: 20),
            SizedBox(
              width: 330,
              child: Row(
                mainAxisAlignment: MainAxisAlignment.end,
                children: [
                  CustomButton(
                    type: ButtonType.submitButton,
                    onPressed: () async {
                      if (timesheetData != null) {
                        await _submitTimesheet(timesheetData, editMode, docId);
                        Navigator.pushNamedAndRemoveUntil(
                          context,
                          '/timesheets',
                          (route) => false,
                        );
                      }
                    },
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildReviewLayout(TimesheetData data) {
    return Container(
      width: 292,
      decoration: BoxDecoration(
        border: Border.all(color: Colors.black, width: 0.5),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          _buildTitleTimeSheet("TIME SHEET"),
          _drawHorizontalLine(),
          _buildLineJobName("JOB NAME:", data.jobName),
          _drawHorizontalLine(),
          _buildLineDateTmRow(data.date, data.tm),
          _drawHorizontalLine(),
          _buildLineJobSize("JOB SIZE:", data.jobSize),
          _drawHorizontalLine(),
          _buildLineMaterialRow("MATERIAL:", data.material),
          _drawHorizontalLine(),
          _buildLineJobDesc("JOB DESC.:", data.jobDesc),
          _drawHorizontalLine(),
          _buildLineForemanVehicle(data.foreman, data.vehicle),
          _drawHorizontalLine(),
          if (data.workers.isEmpty)
            _buildLineText("No Workers added.", "")
          else
            _buildWorkersTable(data.workers),
        ],
      ),
    );
  }

  Widget _buildTitleTimeSheet(String text) {
    return Container(
      width: 290,
      height: 24,
      alignment: Alignment.center,
      child: Text(
        text,
        style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
      ),
    );
  }

  Widget _drawHorizontalLine() {
    return Container(height: 0.5, color: Colors.black);
  }

  Widget _buildLineJobName(String label, String value) {
    return SizedBox(
      height: 18,
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.center,
        children: [
          SizedBox(
            width: 64,
            child: Text(
              label,
              style: const TextStyle(fontSize: 11, fontWeight: FontWeight.bold),
              textAlign: TextAlign.center,
              overflow: TextOverflow.ellipsis,
            ),
          ),
          SizedBox(
            width: 227,
            child: Text(
              value,
              style: const TextStyle(fontSize: 11),
              textAlign: TextAlign.left,
              overflow: TextOverflow.ellipsis,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildLineDateTmRow(String dateValue, String tmValue) {
    return SizedBox(
      height: 18,
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.center,
        children: [
          SizedBox(
            width: 36,
            child: Text(
              "DATE:",
              style: const TextStyle(fontSize: 11, fontWeight: FontWeight.bold),
              textAlign: TextAlign.center,
              overflow: TextOverflow.ellipsis,
            ),
          ),
          SizedBox(
            width: 133,
            child: Text(
              dateValue,
              style: const TextStyle(fontSize: 11),
              textAlign: TextAlign.left,
              overflow: TextOverflow.ellipsis,
            ),
          ),
          Container(width: 0.5, color: Colors.black),
          SizedBox(
            width: 31,
            child: Text(
              "T.M.:",
              style: const TextStyle(fontSize: 11, fontWeight: FontWeight.bold),
              textAlign: TextAlign.center,
              overflow: TextOverflow.ellipsis,
            ),
          ),
          SizedBox(
            width: 90,
            child: Text(
              tmValue,
              style: const TextStyle(fontSize: 11),
              textAlign: TextAlign.left,
              overflow: TextOverflow.ellipsis,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildLineJobSize(String label, String value) {
    return SizedBox(
      height: 18,
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.center,
        children: [
          SizedBox(
            width: 56,
            child: Text(
              label,
              style: const TextStyle(fontSize: 11, fontWeight: FontWeight.bold),
              textAlign: TextAlign.center,
              overflow: TextOverflow.ellipsis,
            ),
          ),
          SizedBox(
            width: 234,
            child: Text(
              value,
              style: const TextStyle(fontSize: 11),
              textAlign: TextAlign.left,
              overflow: TextOverflow.ellipsis,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildLineMaterialRow(String label, String value) {
    return SizedBox(
      height: 52,
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.center,
        children: [
          SizedBox(
            width: 66,
            child: Text(
              label,
              style: const TextStyle(fontSize: 11, fontWeight: FontWeight.bold),
              textAlign: TextAlign.center,
              overflow: TextOverflow.ellipsis,
            ),
          ),
          SizedBox(
            width: 224,
            child: Text(
              value,
              style: const TextStyle(fontSize: 11),
              textAlign: TextAlign.left,
              overflow: TextOverflow.visible,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildLineJobDesc(String label, String value) {
    return SizedBox(
      height: 52,
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.center,
        children: [
          SizedBox(
            width: 66,
            child: Text(
              label,
              style: const TextStyle(fontSize: 11, fontWeight: FontWeight.bold),
              textAlign: TextAlign.center,
              overflow: TextOverflow.ellipsis,
            ),
          ),
          SizedBox(
            width: 224,
            child: Text(
              value,
              style: const TextStyle(fontSize: 11),
              textAlign: TextAlign.left,
              overflow: TextOverflow.visible,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildLineForemanVehicle(String foreman, String vehicle) {
    return SizedBox(
      height: 18,
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.center,
        children: [
          SizedBox(
            width: 64,
            child: Text(
              "FOREMAN:",
              style: const TextStyle(fontSize: 11, fontWeight: FontWeight.bold),
              textAlign: TextAlign.center,
              overflow: TextOverflow.ellipsis,
            ),
          ),
          SizedBox(
            width: 118,
            child: Text(
              foreman,
              style: const TextStyle(fontSize: 11),
              textAlign: TextAlign.left,
              overflow: TextOverflow.ellipsis,
            ),
          ),
          Container(width: 0.5, color: Colors.black),
          SizedBox(
            width: 52,
            child: Text(
              "VEHICLE:",
              style: const TextStyle(fontSize: 11, fontWeight: FontWeight.bold),
              textAlign: TextAlign.center,
              overflow: TextOverflow.ellipsis,
            ),
          ),
          SizedBox(
            width: 56,
            child: Text(
              vehicle,
              style: const TextStyle(fontSize: 11),
              textAlign: TextAlign.left,
              overflow: TextOverflow.ellipsis,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildLineText(String label, String value, {bool multiLine = false}) {
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 8),
      constraints: const BoxConstraints(minHeight: 18),
      child: Row(
        crossAxisAlignment:
            multiLine ? CrossAxisAlignment.start : CrossAxisAlignment.center,
        children: [
          Text(
            label,
            style: const TextStyle(fontSize: 11, fontWeight: FontWeight.bold),
            textAlign: TextAlign.center,
          ),
          const SizedBox(width: 6),
          Expanded(
            child: Text(
              value,
              style: const TextStyle(fontSize: 11),
              textAlign: TextAlign.left,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildWorkersTable(List<Map<String, String>> workers) {
    final rows = <TableRow>[
      TableRow(
        decoration: const BoxDecoration(color: Color(0xFFEFEFEF)),
        children: [
          _buildHeaderCell("NAME", fontSize: 11, textAlign: TextAlign.center),
          _buildHeaderCell("START", fontSize: 8, textAlign: TextAlign.center),
          _buildHeaderCell("FINISH", fontSize: 8, textAlign: TextAlign.center),
          _buildHeaderCell("HOUR", fontSize: 8, textAlign: TextAlign.center),
          _buildHeaderCell("TRAVEL", fontSize: 7, textAlign: TextAlign.center),
          _buildHeaderCell("MEAL", fontSize: 8, textAlign: TextAlign.center),
        ],
      ),
      for (final w in workers)
        TableRow(
          children: [
            _buildDataCell(w['name'] ?? '',
                fontSize: 11, textAlign: TextAlign.left),
            _buildDataCell(w['start'] ?? '',
                fontSize: 11, textAlign: TextAlign.center),
            _buildDataCell(w['finish'] ?? '',
                fontSize: 11, textAlign: TextAlign.center),
            _buildDataCell(w['hours'] ?? '',
                fontSize: 11, textAlign: TextAlign.center),
            _buildDataCell(w['travel'] ?? '',
                fontSize: 11, textAlign: TextAlign.center),
            _buildDataCell(w['meal'] ?? '',
                fontSize: 11, textAlign: TextAlign.center),
          ],
        ),
    ];

    for (int i = 0; i < 4; i++) {
      rows.add(
        TableRow(
          children: [
            for (int c = 0; c < 6; c++)
              _buildDataCell('', fontSize: 11, textAlign: TextAlign.left),
          ],
        ),
      );
    }

    return SizedBox(
      width: 290,
      child: Table(
        border: TableBorder(
          top: const BorderSide(width: 0, color: Colors.transparent),
          left: const BorderSide(width: 0, color: Colors.transparent),
          right: const BorderSide(width: 0, color: Colors.transparent),
          bottom: const BorderSide(width: 0, color: Colors.transparent),
          horizontalInside: const BorderSide(width: 0.5, color: Colors.black),
          verticalInside: const BorderSide(width: 0.5, color: Colors.black),
        ),
        columnWidths: const {
          0: FixedColumnWidth(120),
          1: FixedColumnWidth(40),
          2: FixedColumnWidth(40),
          3: FixedColumnWidth(30),
          4: FixedColumnWidth(33),
          5: FixedColumnWidth(28),
        },
        children: rows,
      ),
    );
  }

  Widget _buildHeaderCell(String text,
      {required double fontSize, required TextAlign textAlign}) {
    return Container(
      alignment: Alignment.center,
      height: 18,
      child: Text(
        text,
        style: TextStyle(
          fontFamily: 'Barlow',
          fontSize: fontSize,
          fontWeight: FontWeight.bold,
          color: const Color(0xFF3B3B3B),
        ),
        textAlign: textAlign,
      ),
    );
  }

  Widget _buildDataCell(String text,
      {required double fontSize, required TextAlign textAlign}) {
    return Container(
      alignment: Alignment.center,
      height: 18,
      child: Text(
        text,
        style: TextStyle(
          fontFamily: 'Barlow',
          fontSize: fontSize,
          color: const Color(0xFF3B3B3B),
        ),
        textAlign: textAlign,
      ),
    );
  }
}
import 'package:flutter/material.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:http/http.dart' as http; // Para checar internet
import '../widgets/logo_text.dart';
import '../widgets/custom_button.dart';
import '../widgets/custom_input_field.dart';

class LoginScreen extends StatefulWidget {
  const LoginScreen({Key? key}) : super(key: key);

  @override
  State<LoginScreen> createState() => _LoginScreenState();
}

class _LoginScreenState extends State<LoginScreen> {
  final _emailController = TextEditingController();
  final _passwordController = TextEditingController();

  bool _showEmailError = false;
  bool _showPasswordError = false;

  bool _isLoading = false;
  String _errorMessage = '';

  bool _validateFields() {
    final emailEmpty = _emailController.text.trim().isEmpty;
    final passwordEmpty = _passwordController.text.trim().isEmpty;

    setState(() {
      _showEmailError = emailEmpty;
      _showPasswordError = passwordEmpty;
    });
    return !(emailEmpty || passwordEmpty);
  }

  Future<void> _handleLogin() async {
    if (!_validateFields()) return;

    setState(() {
      _isLoading = true;
      _errorMessage = '';
    });

    try {
      await FirebaseAuth.instance.signInWithEmailAndPassword(
        email: _emailController.text.trim(),
        password: _passwordController.text.trim(),
      );
      Navigator.pushReplacementNamed(context, '/home');
    } on FirebaseAuthException catch (e) {
      // Loga no terminal do macOS/Android/etc.
      print('Auth error code=${e.code}, message=${e.message}');

      if (e.code == 'network-request-failed') {
        // Tenta ver se realmente não há internet
        final hasConnection = await _testInternetConnection();
        if (!hasConnection) {
          setState(() {
            _errorMessage = 'No internet connection. Check your network.';
          });
        } else {
          // Aparentemente tem internet, mas ainda deu "network-request-failed"
          // Pode ser firewall / sandbox / horário do mac desatualizado, etc.
          setState(() {
            _errorMessage = 'Network request failed, but internet seems up.\n'
                'Possibly firewall or sandbox blocking Firebase requests.';
          });
        }
      } else {
        // Se não for erro de rede, usamos o switch normal
        setState(() {
          _errorMessage = _getFirebaseErrorMessage(e.code);
        });
      }
    } catch (e) {
      setState(() {
        _errorMessage = 'An unexpected error occurred. Try again.';
      });
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  String _getFirebaseErrorMessage(String errorCode) {
    switch (errorCode) {
      case 'user-not-found':
        return 'User not found. Check your email.';
      case 'wrong-password':
        return 'Incorrect password. Try again.';
      case 'invalid-email':
        return 'Invalid email format.';
      case 'too-many-requests':
        return 'Too many attempts. Please wait and try again.';
      default:
        return 'Login error. Check your credentials. ($errorCode)';
    }
  }

  /// Teste simples de conectividade fazendo GET em "www.google.com"
  /// Retorna `true` se statusCode==200, caso contrário `false`.
  Future<bool> _testInternetConnection() async {
    try {
      final response = await http
          .get(Uri.parse('https://www.google.com'))
          .timeout(const Duration(seconds: 5));
      return response.statusCode == 200;
    } catch (_) {
      return false;
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      // Scaffold normal, não usamos BaseLayout aqui
      body: SingleChildScrollView(
        padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 20),
        child: Column(
          children: [
            const SizedBox(height: 70),
            const LogoText(),
            const SizedBox(height: 30),
            const Text(
              'Login',
              style: TextStyle(fontSize: 30, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 20),

            // Campo de Email
            CustomInputField(
              label: "Email",
              hintText: "Enter your email",
              controller: _emailController,
              error: _showEmailError,
              onClearError: () {
                setState(() {
                  _showEmailError = false;
                });
              },
            ),
            const SizedBox(height: 20),

            // Campo de Senha
            CustomInputField(
              label: "Password",
              hintText: "Enter your password",
              controller: _passwordController,
              error: _showPasswordError,
              onClearError: () {
                setState(() {
                  _showPasswordError = false;
                });
              },
            ),

            const SizedBox(height: 30),

            if (_errorMessage.isNotEmpty)
              Padding(
                padding: const EdgeInsets.only(bottom: 10),
                child: Text(
                  _errorMessage,
                  style: const TextStyle(color: Colors.red, fontSize: 14),
                  textAlign: TextAlign.center,
                ),
              ),

            _isLoading
                ? const CircularProgressIndicator()
                : CustomButton(
                    type: ButtonType.loginButton,
                    onPressed: _handleLogin,
                  ),
            const SizedBox(height: 40),
          ],
        ),
      ),
    );
  }
}
import 'package:flutter/material.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import '../widgets/base_layout.dart';
import '../widgets/title_box.dart';
import '../widgets/custom_input_field.dart';
import '../widgets/custom_button.dart';

class NewUserScreen extends StatefulWidget {
  const NewUserScreen({Key? key}) : super(key: key);

  @override
  State<NewUserScreen> createState() => _NewUserScreenState();
}

class _NewUserScreenState extends State<NewUserScreen> {
  final _firstNameController = TextEditingController();
  final _lastNameController = TextEditingController();
  final _emailController = TextEditingController();
  final _passwordController = TextEditingController();
  final _confirmPasswordController = TextEditingController();
  String _selectedRole = 'User';
  bool _isLoading = false;
  String _errorMessage = '';

  Future<void> _registerUser() async {
    setState(() {
      _isLoading = true;
      _errorMessage = '';
    });
    if (_passwordController.text.trim() !=
        _confirmPasswordController.text.trim()) {
      setState(() {
        _errorMessage = "Passwords do not match.";
        _isLoading = false;
      });
      return;
    }
    try {
      final userCredential =
          await FirebaseAuth.instance.createUserWithEmailAndPassword(
        email: _emailController.text.trim(),
        password: _passwordController.text.trim(),
      );
      await FirebaseFirestore.instance
          .collection('users')
          .doc(userCredential.user!.uid)
          .set({
        'userId': userCredential.user!.uid,
        'firstName': _firstNameController.text.trim(),
        'lastName': _lastNameController.text.trim(),
        'email': _emailController.text.trim(),
        'role': _selectedRole,
        'createdAt': FieldValue.serverTimestamp(),
      });
      Navigator.pushReplacementNamed(context, '/login');
    } on FirebaseAuthException catch (e) {
      setState(() {
        _errorMessage = _getFirebaseErrorMessage(e.code);
      });
    } catch (_) {
      setState(() {
        _errorMessage = 'An unexpected error occurred. Try again.';
      });
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  String _getFirebaseErrorMessage(String errorCode) {
    switch (errorCode) {
      case 'email-already-in-use':
        return 'This email is already registered.';
      case 'weak-password':
        return 'The password is too weak.';
      case 'invalid-email':
        return 'Invalid email format.';
      default:
        return 'Error registering user. Please try again.';
    }
  }

  @override
  Widget build(BuildContext context) {
    const Color appBlueColor = Color(0xFF0205D3);
    const Color appYellowColor = Color(0xFFFFFDD0);
    return BaseLayout(
      title: "Timesheet",
      child: SingleChildScrollView(
        padding: const EdgeInsets.symmetric(vertical: 16),
        child: Column(
          children: [
            const TitleBox(title: "New User"),
            const SizedBox(height: 20),
            CustomInputField(
              label: "First name",
              hintText: "Enter your first name",
              controller: _firstNameController,
            ),
            const SizedBox(height: 16),
            CustomInputField(
              label: "Last name",
              hintText: "Enter your last name",
              controller: _lastNameController,
            ),
            const SizedBox(height: 16),
            CustomInputField(
              label: "Email",
              hintText: "Enter your email",
              controller: _emailController,
            ),
            const SizedBox(height: 16),
            CustomInputField(
              label: "Password",
              hintText: "Enter your password",
              controller: _passwordController,
            ),
            const SizedBox(height: 16),
            CustomInputField(
              label: "Confirm password",
              hintText: "Re-enter your password",
              controller: _confirmPasswordController,
            ),
            const SizedBox(height: 16),
            SizedBox(
              width: 100,
              height: 40,
              child: DropdownButtonFormField<String>(
                value: _selectedRole,
                items: <String>['User', 'Admin']
                    .map<DropdownMenuItem<String>>((String value) {
                  return DropdownMenuItem<String>(
                    value: value,
                    child: Text(value, style: const TextStyle(fontSize: 16)),
                  );
                }).toList(),
                onChanged: (String? newValue) {
                  setState(() {
                    _selectedRole = newValue ?? 'User';
                  });
                },
                decoration: InputDecoration(
                  labelText: 'Role',
                  labelStyle: const TextStyle(
                      fontWeight: FontWeight.bold,
                      fontSize: 16,
                      color: Colors.black),
                  floatingLabelStyle: const TextStyle(
                      fontWeight: FontWeight.bold,
                      fontSize: 12,
                      color: appBlueColor),
                  hintText: 'Select',
                  hintStyle: const TextStyle(
                      fontWeight: FontWeight.bold, color: Colors.grey),
                  filled: true,
                  fillColor: appYellowColor,
                  enabledBorder: const OutlineInputBorder(
                      borderSide: BorderSide(color: appBlueColor, width: 1)),
                  focusedBorder: const OutlineInputBorder(
                      borderSide: BorderSide(color: appBlueColor, width: 2)),
                  border: const OutlineInputBorder(
                      borderSide: BorderSide(color: appBlueColor, width: 1)),
                  contentPadding:
                      const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                ),
              ),
            ),
            const SizedBox(height: 20),
            if (_errorMessage.isNotEmpty)
              Padding(
                padding: const EdgeInsets.only(bottom: 10),
                child: Text(_errorMessage,
                    style: const TextStyle(color: Colors.red, fontSize: 14)),
              ),
            _isLoading
                ? const CircularProgressIndicator()
                : CustomButton(
                    type: ButtonType.addUserButton,
                    onPressed: _registerUser,
                  ),
          ],
        ),
      ),
    );
  }
}
import 'package:flutter/material.dart';
import '../widgets/logo_text.dart';
import '../widgets/base_layout.dart';
import '../widgets/custom_button.dart';

class HomeScreen extends StatelessWidget {
  const HomeScreen({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return BaseLayout(
      title: "Timesheet",
      child: SingleChildScrollView(
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.center,
          children: [
            const SizedBox(height: 70),
            const LogoText(),
            const SizedBox(height: 40),
            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 16),
              child: Wrap(
                spacing: 15,
                runSpacing: 20,
                alignment: WrapAlignment.center,
                children: [
                  CustomButton(
                    type: ButtonType.sheetsButton,
                    onPressed: () {
                      Navigator.pushNamed(context, '/timesheets');
                    },
                  ),
                  CustomButton(
                    type: ButtonType.receiptsButton,
                    onPressed: () {
                      // Direciona para a nova página
                      Navigator.pushNamed(context, '/receipts');
                    },
                  ),
                  CustomButton(
                    type: ButtonType.settingsButton,
                    onPressed: () {
                      Navigator.pushNamed(context, '/settings');
                    },
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }
}
import 'dart:io';
import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:hive_flutter/hive_flutter.dart';
import 'firebase_options.dart';
import 'screens/login_screen.dart';
import 'screens/home_screen.dart';
import 'screens/new_user_screen.dart';
import 'screens/new_time_sheet_screen.dart';
import 'screens/review_time_sheet_screen.dart';
import 'screens/add_workers_screen.dart';
import 'screens/timesheets_screen.dart';
import 'screens/timesheet_view_screen.dart';
import 'screens/settings_screen.dart';
import 'screens/users_screen.dart';
import 'screens/workers_screen.dart';
import 'screens/receipts_screen.dart';
import 'screens/preview_receipt_screen.dart';
import 'screens/receipt_viewer_screen.dart';
import 'screens/cards_screen.dart';
import 'services/update_service.dart';
import 'services/local_timesheet_service.dart';

final RouteObserver<ModalRoute<void>> routeObserver =
    RouteObserver<ModalRoute<void>>();

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);

  // Inicializa o Hive e o serviço local
  await Hive.initFlutter();
  await LocalTimesheetService.init();

  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({Key? key}) : super(key: key);
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      title: 'Timesheet App',
      theme: ThemeData(primarySwatch: Colors.blue),
      navigatorObservers: [routeObserver],
      initialRoute: '/',
      routes: {
        '/': (context) => const AuthWrapper(),
        '/login': (context) => const LoginScreen(),
        '/home': (context) => const HomeScreen(),
        '/new-time-sheet': (context) => const NewTimeSheetScreen(),
        '/add-workers': (context) => const AddWorkersScreen(),
        '/review-time-sheet': (context) => const ReviewTimeSheetScreen(),
        '/timesheets': (context) => const TimesheetsScreen(),
        '/timesheet-view': (context) => const TimesheetViewScreen(),
        '/new-user': (context) => const NewUserScreen(),
        '/settings': (context) => const SettingsScreen(),
        '/users': (context) => const UsersScreen(),
        '/workers': (context) => const WorkersScreen(),
        '/receipts': (context) => const ReceiptsScreen(),
        '/preview-receipt': (context) => const PreviewReceiptScreen(),
        '/receipt-viewer': (context) {
          final args =
              ModalRoute.of(context)?.settings.arguments as Map<String, dynamic>?;
          final imageUrl = args?['imageUrl'] ?? '';
          return ReceiptViewerScreen(imageUrl: imageUrl);
        },
        '/cards': (context) => const CardsScreen(),
      },
    );
  }
}

class AuthWrapper extends StatefulWidget {
  const AuthWrapper({Key? key}) : super(key: key);
  @override
  State<AuthWrapper> createState() => _AuthWrapperState();
}

class _AuthWrapperState extends State<AuthWrapper> {
  final UpdateService _updateService = UpdateService();
  bool _alreadyChecked = false;

  @override
  Widget build(BuildContext context) {
    return StreamBuilder<User?>(
      stream: FirebaseAuth.instance.authStateChanges(),
      builder: (context, snapshot) {
        if (snapshot.connectionState == ConnectionState.waiting) {
          return const Scaffold(
              body: Center(child: CircularProgressIndicator()));
        }
        final user = snapshot.data;
        if (user == null) {
          return const LoginScreen();
        }
        if (!_alreadyChecked) {
          _checkVersionAfterLogin();
          _alreadyChecked = true;
        }
        return const HomeScreen();
      },
    );
  }

  Future<void> _checkVersionAfterLogin() async {
    await _updateService.checkForUpdate(context);
  }
}
// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'local_timesheet_service.dart';

// **************************************************************************
// TypeAdapterGenerator
// **************************************************************************

class LocalTimesheetAdapter extends TypeAdapter<LocalTimesheet> {
  @override
  final int typeId = 0;

  @override
  LocalTimesheet read(BinaryReader reader) {
    final numOfFields = reader.readByte();
    final fields = <int, dynamic>{
      for (int i = 0; i < numOfFields; i++) reader.readByte(): reader.read(),
    };
    return LocalTimesheet(
      docId: fields[0] as String,
      userId: fields[1] as String,
      jobName: fields[2] as String,
      tm: fields[3] as String,
      material: fields[4] as String,
      date: fields[5] as DateTime,
      updatedAt: fields[6] as DateTime,
    );
  }

  @override
  void write(BinaryWriter writer, LocalTimesheet obj) {
    writer
      ..writeByte(7)
      ..writeByte(0)
      ..write(obj.docId)
      ..writeByte(1)
      ..write(obj.userId)
      ..writeByte(2)
      ..write(obj.jobName)
      ..writeByte(3)
      ..write(obj.tm)
      ..writeByte(4)
      ..write(obj.material)
      ..writeByte(5)
      ..write(obj.date)
      ..writeByte(6)
      ..write(obj.updatedAt);
  }

  @override
  int get hashCode => typeId.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is LocalTimesheetAdapter &&
          runtimeType == other.runtimeType &&
          typeId == other.typeId;
}
// local_timesheet_service.dart
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:hive/hive.dart';

part 'local_timesheet_service.g.dart';

@HiveType(typeId: 0)
class LocalTimesheet extends HiveObject {
  @HiveField(0)
  String docId;
  @HiveField(1)
  String userId;
  @HiveField(2)
  String jobName;
  @HiveField(3)
  String tm;
  @HiveField(4)
  String material;
  @HiveField(5)
  DateTime date;
  @HiveField(6)
  DateTime updatedAt;

  LocalTimesheet({
    required this.docId,
    required this.userId,
    required this.jobName,
    required this.tm,
    required this.material,
    required this.date,
    required this.updatedAt,
  });
}

class LocalTimesheetService {
  static const String boxName = 'local_timesheets';

  static Future<void> init() async {
    if (!Hive.isAdapterRegistered(0)) {
      Hive.registerAdapter(LocalTimesheetAdapter());
    }
    await Hive.openBox<LocalTimesheet>(boxName);
  }

  static Box<LocalTimesheet> get box => Hive.box<LocalTimesheet>(boxName);

  static List<LocalTimesheet> getAllTimesheets() {
    return box.values.toList();
  }

  static Future<void> saveOrUpdate(LocalTimesheet item) async {
    final existingKey = box.keys.firstWhere(
      (k) => box.get(k)?.docId == item.docId,
      orElse: () => null,
    );
    if (existingKey != null) {
      await box.put(existingKey, item);
    } else {
      await box.add(item);
    }
  }

  static Future<void> syncWithFirestore() async {
    final snap = await FirebaseFirestore.instance
        .collection('timesheets')
        .get();
    for (var doc in snap.docs) {
      final data = doc.data();
      final item = LocalTimesheet(
        docId: doc.id,
        userId: data['userId'] ?? '',
        jobName: data['jobName'] ?? '',
        tm: data['tm'] ?? '',
        material: data['material'] ?? '',
        date: (data['date'] as Timestamp?)?.toDate() ?? DateTime.now(),
        updatedAt: (data['updatedAt'] as Timestamp?)?.toDate() ?? DateTime.now(),
      );
      await saveOrUpdate(item);
    }
  }
}
import 'dart:io';
import 'package:path_provider/path_provider.dart';
import 'package:pdf/pdf.dart';
import 'package:pdf/widgets.dart' as pw;
import 'package:printing/printing.dart';
import 'package:intl/intl.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

class PdfService {
  Future<void> generateTimesheetPdf(
      Map<String, Map<String, dynamic>> selectedTimesheets) async {
    if (selectedTimesheets.isEmpty) {
      throw Exception("Nenhum timesheet selecionado!");
    }

    try {
      final pdf = pw.Document();

      selectedTimesheets.forEach((docId, data) {
        final jobName = data['jobName'] ?? '';

        // ✅ CONVERSÃO SEGURA DO CAMPO "date"
        final dynamic rawDate = data['date'];
        String date = '';
        if (rawDate is Timestamp) {
          date = DateFormat("M/d/yy, EEEE").format(rawDate.toDate());
        } else if (rawDate is DateTime) {
          date = DateFormat("M/d/yy, EEEE").format(rawDate);
        } else if (rawDate is String) {
          date = rawDate;
        }

        final tm = data['tm'] ?? '';
        final jobSize = data['jobSize'] ?? '';
        final material = data['material'] ?? '';
        final jobDesc = data['jobDesc'] ?? '';
        final foreman = data['foreman'] ?? '';
        final vehicle = data['vehicle'] ?? '';
        final notes = data['notes'] ?? '';
        final List<dynamic> workersRaw = data['workers'] ?? [];
        final List<Map<String, dynamic>> workers = workersRaw.map((item) {
          if (item is Map<String, dynamic>) {
            return {
              'name': item['name'] ?? '',
              'start': item['start'] ?? '',
              'finish': item['finish'] ?? '',
              'hours': item['hours'] ?? '',
              'travel': item['travel'] ?? '',
              'meal': item['meal'] ?? '',
            };
          }
          return <String, dynamic>{};
        }).toList();

        pdf.addPage(
          pw.Page(
            pageFormat: PdfPageFormat.letter,
            margin: const pw.EdgeInsets.all(20),
            build: (pw.Context context) {
              return pw.Center(
                child: pw.Column(
                  children: [
                    _buildTitle(),
                    _buildJobDetails(
                      jobName,
                      date,
                      tm,
                      jobSize,
                      material,
                      jobDesc,
                      foreman,
                      vehicle,
                    ),
                    _buildTable(workers),
                    if (notes.isNotEmpty) _buildNotes(notes),
                  ],
                ),
              );
            },
          ),
        );
      });

      final bytes = await pdf.save();
      final dir = await getApplicationDocumentsDirectory();
      final file = File('${dir.path}/timesheets.pdf');
      await file.writeAsBytes(bytes);

      await Printing.layoutPdf(
        onLayout: (PdfPageFormat format) async => pdf.save(),
      );
    } catch (e) {
      throw Exception("Erro ao gerar PDF: $e");
    }
  }

  pw.Widget _buildTitle() {
    return pw.Container(
      width: 500,
      height: 50,
      alignment: pw.Alignment.center,
      decoration: pw.BoxDecoration(
        border: pw.Border(
          bottom: pw.BorderSide(color: PdfColors.black, width: 0.5),
        ),
      ),
      child: pw.Text(
        'TIMESHEET',
        style: pw.TextStyle(fontSize: 28, fontWeight: pw.FontWeight.bold),
      ),
    );
  }

  pw.Widget _buildJobDetails(
    String jobName,
    String date,
    String tm,
    String jobSize,
    String material,
    String jobDesc,
    String foreman,
    String vehicle,
  ) {
    return pw.Container(
      width: 500,
      decoration: pw.BoxDecoration(
        border: pw.Border.all(color: PdfColors.black, width: 0.5),
      ),
      child: pw.Column(
        children: [
          _buildRow1Col("Job name:", jobName),
          _buildRow2Cols("Date:", date, "T. M.:", tm),
          _buildRow1Col("Job size:", jobSize),
          _buildRow1ColExpandable("Material:", material),
          _buildRow1ColExpandable("Job description:", jobDesc),
          _buildRow2Cols("Foreman:", foreman, "Vehicle:", vehicle),
        ],
      ),
    );
  }

  pw.Widget _buildRow1Col(String label, String value) {
    return pw.Container(
      height: 22,
      decoration: pw.BoxDecoration(
        border: pw.Border(
          bottom: pw.BorderSide(color: PdfColors.black, width: 0.5),
        ),
      ),
      child: pw.Row(
        children: [
          pw.Container(
            width: 500,
            padding: const pw.EdgeInsets.symmetric(horizontal: 8),
            child: pw.Row(
              children: [
                pw.Text(label,
                    style: pw.TextStyle(fontWeight: pw.FontWeight.bold)),
                pw.SizedBox(width: 4),
                pw.Text(value),
              ],
            ),
          ),
        ],
      ),
    );
  }

  pw.Widget _buildRow1ColExpandable(String label, String value) {
    return pw.Container(
      constraints: pw.BoxConstraints(minHeight: 22),
      decoration: pw.BoxDecoration(
        border: pw.Border(
          bottom: pw.BorderSide(color: PdfColors.black, width: 0.5),
        ),
      ),
      padding: const pw.EdgeInsets.symmetric(horizontal: 8),
      child: pw.Row(
        crossAxisAlignment: pw.CrossAxisAlignment.center,
        children: [
          pw.Text(label, style: pw.TextStyle(fontWeight: pw.FontWeight.bold)),
          pw.SizedBox(width: 4),
          pw.Expanded(child: pw.Text(value)),
        ],
      ),
    );
  }

  pw.Widget _buildRow2Cols(
      String label1, String value1, String label2, String value2) {
    return pw.Container(
      height: 22,
      decoration: pw.BoxDecoration(
        border: pw.Border(
          bottom: pw.BorderSide(color: PdfColors.black, width: 0.5),
        ),
      ),
      child: pw.Row(
        children: [
          pw.Container(
            width: 250,
            padding: const pw.EdgeInsets.symmetric(horizontal: 8),
            child: pw.Row(
              children: [
                pw.Text(label1,
                    style: pw.TextStyle(fontWeight: pw.FontWeight.bold)),
                pw.SizedBox(width: 4),
                pw.Text(value1),
              ],
            ),
          ),
          pw.Container(
            width: 250,
            padding: const pw.EdgeInsets.symmetric(horizontal: 8),
            child: pw.Row(
              children: [
                pw.Text(label2,
                    style: pw.TextStyle(fontWeight: pw.FontWeight.bold)),
                pw.SizedBox(width: 4),
                pw.Text(value2),
              ],
            ),
          ),
        ],
      ),
    );
  }

  pw.Widget _buildTable(List<Map<String, dynamic>> workers) {
    final headers = ['Name', 'Start', 'Finish', 'Hours', 'Travel', 'Meal'];
    final data = workers.map((w) {
      return [
        w['name'] ?? '',
        w['start'] ?? '',
        w['finish'] ?? '',
        w['hours'] ?? '',
        w['travel'] ?? '',
        w['meal'] ?? '',
      ];
    }).toList();

    while (data.length < 7) {
      data.add(['', '', '', '', '', '']);
    }

    return pw.Container(
      width: 500,
      decoration: pw.BoxDecoration(
        border: pw.Border.all(color: PdfColors.black, width: 0.5),
      ),
      child: pw.Table(
        border: pw.TableBorder.all(color: PdfColors.black, width: 0.5),
        columnWidths: {
          0: pw.FixedColumnWidth(200),
          1: pw.FixedColumnWidth(60),
          2: pw.FixedColumnWidth(60),
          3: pw.FixedColumnWidth(60),
          4: pw.FixedColumnWidth(60),
          5: pw.FixedColumnWidth(60),
        },
        children: [
          pw.TableRow(
            children: headers.map((h) {
              return pw.Container(
                height: 22,
                alignment: pw.Alignment.center,
                child: pw.Text(
                  h,
                  style: pw.TextStyle(fontWeight: pw.FontWeight.bold),
                ),
              );
            }).toList(),
          ),
          ...data.map((row) {
            return pw.TableRow(
              children: row.map((cell) {
                return pw.Container(
                  height: 22,
                  alignment: pw.Alignment.center,
                  child: pw.Text(cell),
                );
              }).toList(),
            );
          }),
        ],
      ),
    );
  }

  pw.Widget _buildNotes(String notes) {
    return pw.Container(
      width: 500,
      padding: const pw.EdgeInsets.all(8),
      decoration: pw.BoxDecoration(
        border: pw.Border(
          top: pw.BorderSide(color: PdfColors.black, width: 0.5),
          left: pw.BorderSide.none,
          right: pw.BorderSide.none,
          bottom: pw.BorderSide.none,
        ),
      ),
      child: pw.Row(
        crossAxisAlignment: pw.CrossAxisAlignment.start,
        children: [
          pw.Text(
            'Note:',
            style: pw.TextStyle(fontWeight: pw.FontWeight.bold),
          ),
          pw.SizedBox(width: 4),
          pw.Expanded(
            child: pw.Text(notes),
          ),
        ],
      ),
    );
  }
}
import 'dart:io';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:dio/dio.dart';
import 'package:open_file/open_file.dart';
import 'package:path_provider/path_provider.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:url_launcher/url_launcher.dart';
import 'package:package_info_plus/package_info_plus.dart';

class UpdateService {
  final _firestore = FirebaseFirestore.instance;

  Future<Map<String, dynamic>?> fetchPlatformVersionInfo() async {
    print("[UpdateService] fetchPlatformVersionInfo() called");
    try {
      print("[UpdateService] Query doc('appConfig') in collection('config')");
      final doc = await _firestore.collection('config').doc('appConfig').get();
      print("[UpdateService] doc.exists => ${doc.exists}");
      if (!doc.exists) {
        print("[UpdateService] doc doesn't exist => null");
        return null;
      }

      final data = doc.data()!;
      print("[UpdateService] data => $data");

      if (Platform.isAndroid) {
        print("[UpdateService] Running on ANDROID");
        final versionName = data['androidVersionName'] ?? '0.0.0';
        final downloadUrl = data['androidDownloadUrl'] ?? '';
        print(
            "[UpdateService] androidVersionName=$versionName, androidDownloadUrl=$downloadUrl");
        return {
          'versionName': versionName,
          'downloadUrl': downloadUrl,
        };
      } else if (Platform.isIOS) {
        print("[UpdateService] Running on IOS");
        final versionName = data['iosVersionName'] ?? '0.0.0';
        final downloadUrl = data['iosDownloadUrl'] ?? '';
        print(
            "[UpdateService] iosVersionName=$versionName, iosDownloadUrl=$downloadUrl");
        return {
          'versionName': versionName,
          'downloadUrl': downloadUrl,
        };
      }

      print("[UpdateService] This is not Android/iOS -> returning null");
      return null;
    } catch (e) {
      print("[UpdateService] ERROR in fetchPlatformVersionInfo: $e");
      rethrow;
    }
  }

  bool isRemoteVersionNewer(String local, String remote) {
    print("[UpdateService] Comparing local=$local with remote=$remote");
    try {
      final localParts = local.split('.').map(int.parse).toList();
      final remoteParts = remote.split('.').map(int.parse).toList();
      for (int i = 0; i < localParts.length; i++) {
        if (remoteParts[i] > localParts[i]) {
          print("[UpdateService] remote is bigger at index $i => return true");
          return true;
        } else if (remoteParts[i] < localParts[i]) {
          print("[UpdateService] local is bigger at index $i => return false");
          return false;
        }
      }
      print("[UpdateService] versions are equal => return false");
      return false;
    } catch (e) {
      print("[UpdateService] ERROR in isRemoteVersionNewer: $e");
      return false;
    }
  }

  /// Método principal que checa atualização e, se necessário, executa o fluxo de update.
  Future<void> checkForUpdate(BuildContext context) async {
    try {
      final packageInfo = await PackageInfo.fromPlatform();
      final localVersion = packageInfo.version;
      print("[UpdateService] Local version: $localVersion");

      final remoteData = await fetchPlatformVersionInfo();
      if (remoteData == null) {
        print("[UpdateService] No remote update data found.");
        return;
      }
      final remoteVersion = remoteData['versionName'] ?? "0.0.0";
      final downloadUrl = remoteData['downloadUrl'] ?? "";
      if (!isRemoteVersionNewer(localVersion, remoteVersion)) {
        print("[UpdateService] No update available.");
        return;
      }
      await _showUpdateDialog(context, remoteVersion, downloadUrl);
    } catch (e) {
      print("[UpdateService] checkForUpdate error: $e");
    }
  }

  Future<void> _showUpdateDialog(
      BuildContext context, String remoteVersion, String downloadUrl) async {
    await showDialog<void>(
      context: context,
      barrierDismissible: false,
      builder: (ctx) {
        return AlertDialog(
          title: const Text("New version available"),
          content:
              Text("A new version ($remoteVersion) is available. Update now?"),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(ctx),
              child: const Text("Later"),
            ),
            ElevatedButton(
              onPressed: () {
                Navigator.pop(ctx);
                _handleUpdate(downloadUrl, context);
              },
              child: const Text("Update"),
            ),
          ],
        );
      },
    );
  }

  Future<void> _handleUpdate(String downloadUrl, BuildContext context) async {
    if (Platform.isIOS) {
      // iOS: abre o link de atualização
      await _openIosUpdateLink(downloadUrl, context);
    } else if (Platform.isAndroid) {
      // Android: executa o download com progress dialog
      await _downloadAndOpenUpdate(downloadUrl, context);
    }
  }

  Future<void> _openIosUpdateLink(String url, BuildContext context) async {
    if (url.isEmpty) return;
    try {
      final uri = Uri.parse(url);
      await launchUrl(uri);
    } catch (e) {
      print("[UpdateService] Error opening iOS update link: $e");
      ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text("Unable to open the update link.")));
    }
  }

  Future<void> _downloadAndOpenUpdate(String url, BuildContext context) async {
    if (url.isEmpty) return;

    // Verifica e solicita permissão para instalação em Android
    final status = await Permission.requestInstallPackages.status;
    if (!status.isGranted) {
      bool userAgrees = await _showInstallPermissionExplanation(context);
      if (!userAgrees) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
              content: Text("Permission is required to update the app.")),
        );
        return;
      }
      final result = await Permission.requestInstallPackages.request();
      if (!result.isGranted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
              content:
                  Text("Enable unknown sources installation in settings.")),
        );
        return;
      }
    }

    // Seleciona o diretório para salvar o arquivo
    Directory directory = Platform.isAndroid
        ? (await getExternalStorageDirectory() ??
            await getApplicationDocumentsDirectory())
        : await getApplicationDocumentsDirectory();
    String filePath = "${directory.path}/update.apk";

    double progress = 0.0;
    StateSetter? dialogSetState;

    // Exibe o diálogo de progresso
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) {
        return StatefulBuilder(builder: (context, setState) {
          dialogSetState = setState;
          return AlertDialog(
            title: const Text("Downloading update..."),
            content: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                LinearProgressIndicator(value: progress),
                const SizedBox(height: 10),
                Text("${(progress * 100).toStringAsFixed(0)}%")
              ],
            ),
          );
        });
      },
    );

    try {
      await Dio().download(
        url,
        filePath,
        onReceiveProgress: (received, total) {
          if (total != -1) {
            double newProgress = received / total;
            dialogSetState?.call(() {
              progress = newProgress;
            });
          }
        },
      );
      Navigator.of(context, rootNavigator: true).pop(); // fecha o diálogo
      await OpenFile.open(filePath,
          type: "application/vnd.android.package-archive");
    } catch (e) {
      Navigator.of(context, rootNavigator: true).pop();
      print("[UpdateService] Error downloading or opening file: $e");
    }
  }

  Future<bool> _showInstallPermissionExplanation(BuildContext context) async {
    return await showDialog<bool>(
          context: context,
          barrierDismissible: false,
          builder: (context) {
            return AlertDialog(
              title: const Text("Permission needed"),
              content: const Text(
                  "Allow unknown app installation to update the app?"),
              actions: [
                TextButton(
                  onPressed: () => Navigator.pop(context, false),
                  child: const Text("Cancel"),
                ),
                ElevatedButton(
                  onPressed: () => Navigator.pop(context, true),
                  child: const Text("Proceed"),
                ),
              ],
            );
          },
        ) ??
        false;
  }
}
import 'dart:typed_data';
import 'package:pdf/pdf.dart';
import 'package:pdf/widgets.dart' as pw;
import 'package:printing/printing.dart';
import 'package:http/http.dart' as http;
import 'package:intl/intl.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

class ReceiptPdfService {
  /// Gera o PDF dos recibos, exibindo apenas as informações:
  /// - Cartão usado (campo "cardLabel")
  /// - Data
  /// - Amount
  /// - Description
  ///
  /// As informações são organizadas em duas colunas (duas linhas cada) com fonte tamanho 10.
  /// A imagem ocupa o maior espaço possível dentro da página.
  Future<void> generateReceiptsPdf(
      Map<String, Map<String, dynamic>> selectedReceipts) async {
    if (selectedReceipts.isEmpty) {
      throw Exception("Nenhum receipt selecionado!");
    }
    final pdf = pw.Document();

    for (final entry in selectedReceipts.entries) {
      final data = entry.value;
      final dynamic rawDate = data['date'];
      String date = '';
      if (rawDate is Timestamp) {
        date = DateFormat("M/d/yy, EEEE").format(rawDate.toDate());
      } else if (rawDate is String) {
        date = rawDate;
      }
      final amount = data['amount']?.toString() ?? '';
      final description = data['description'] ?? '';
      final cardLabel = data['cardLabel'] ?? '';
      final imageUrl = data['imageUrl'] ?? '';

      // Formata o amount para evitar dois "$"
      final formattedAmount = amount.startsWith("\$") ? amount : "\$$amount";

      // Baixa a imagem, se existir.
      pw.MemoryImage? netImg;
      if (imageUrl.isNotEmpty) {
        try {
          final resp = await http.get(Uri.parse(imageUrl));
          if (resp.statusCode == 200) {
            netImg = pw.MemoryImage(resp.bodyBytes);
          }
        } catch (e) {
          netImg = null;
        }
      }

      pdf.addPage(
        pw.Page(
          pageFormat: PdfPageFormat.a4,
          margin: const pw.EdgeInsets.all(20),
          build: (pw.Context context) {
            return pw.Column(
              crossAxisAlignment: pw.CrossAxisAlignment.start,
              children: [
                // Informações organizadas em duas colunas com duas linhas cada.
                pw.Row(
                  children: [
                    pw.Expanded(
                      child: pw.Column(
                        crossAxisAlignment: pw.CrossAxisAlignment.start,
                        children: [
                          pw.Text("Card: $cardLabel",
                              style: pw.TextStyle(fontSize: 10)),
                          pw.Text("Date: $date",
                              style: pw.TextStyle(fontSize: 10)),
                        ],
                      ),
                    ),
                    pw.Expanded(
                      child: pw.Column(
                        crossAxisAlignment: pw.CrossAxisAlignment.start,
                        children: [
                          pw.Text("Amount: $formattedAmount",
                              style: pw.TextStyle(fontSize: 10)),
                          pw.Text("Desc: $description",
                              style: pw.TextStyle(fontSize: 10)),
                        ],
                      ),
                    ),
                  ],
                ),
                pw.SizedBox(height: 10),
                // A imagem ocupa o maior espaço possível.
                pw.Expanded(
                  child: netImg != null
                      ? pw.Image(
                          netImg,
                          fit: pw.BoxFit.contain,
                        )
                      : pw.Container(
                          alignment: pw.Alignment.center,
                          child: pw.Text(
                              "No image or failed to load: $imageUrl",
                              style: pw.TextStyle(fontSize: 10)),
                        ),
                ),
              ],
            );
          },
        ),
      );
    }

    await Printing.layoutPdf(
      onLayout: (PdfPageFormat format) async => pdf.save(),
    );
  }
}
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';

// Supondo que você já tenha a classe TimeTextFormatter definida
class TimeTextFormatter extends TextInputFormatter {
  @override
  TextEditingValue formatEditUpdate(
    TextEditingValue oldValue,
    TextEditingValue newValue,
  ) {
    final bool isRemoving = newValue.text.length < oldValue.text.length;
    String digitsOnly = newValue.text.replaceAll(RegExp(r'[^0-9]'), '');
    if (digitsOnly.length > 4) {
      digitsOnly = digitsOnly.substring(0, 4);
    }
    String formatted;
    switch (digitsOnly.length) {
      case 0:
        formatted = '';
        break;
      case 1:
        formatted = digitsOnly;
        break;
      case 2:
        formatted = digitsOnly;
        break;
      case 3:
        formatted = digitsOnly[0] + ':' + digitsOnly.substring(1);
        break;
      default:
        formatted = digitsOnly.substring(0, 2) + ':' + digitsOnly.substring(2);
    }
    TextSelection newSelection;
    if (isRemoving) {
      final baseOffset =
          newValue.selection.baseOffset.clamp(0, formatted.length);
      final extentOffset =
          newValue.selection.extentOffset.clamp(0, formatted.length);
      newSelection = TextSelection(
        baseOffset: baseOffset,
        extentOffset: extentOffset,
      );
    } else {
      newSelection = TextSelection.collapsed(offset: formatted.length);
    }
    return TextEditingValue(
      text: formatted,
      selection: newSelection,
    );
  }
}

class WorkerHoursInputSection extends StatefulWidget {
  final TextEditingController nameController;
  final TextEditingController startController;
  final TextEditingController finishController;
  final TextEditingController hoursController;
  final TextEditingController travelController;
  final TextEditingController mealController;

  const WorkerHoursInputSection({
    Key? key,
    required this.nameController,
    required this.startController,
    required this.finishController,
    required this.hoursController,
    required this.travelController,
    required this.mealController,
  }) : super(key: key);

  @override
  WorkerHoursInputSectionState createState() => WorkerHoursInputSectionState();
}

class WorkerHoursInputSectionState extends State<WorkerHoursInputSection> {
  List<String> _workerOptions = []; // Lista de workers carregados dinamicamente
  String? _selectedName;

  // Controla a borda vermelha do Name
  bool _nameError = false;
  // Controla a borda vermelha do Hours
  bool _hoursError = false;

  // FocusNode para remover erro ao focar o campo Hours
  final FocusNode _hoursFocus = FocusNode();

  @override
  void initState() {
    super.initState();
    if (widget.nameController.text.isNotEmpty) {
      _selectedName = widget.nameController.text;
    }
    _hoursFocus.addListener(() {
      if (_hoursFocus.hasFocus && _hoursError) {
        setState(() {
          _hoursError = false;
        });
      }
    });
    _loadWorkers();
  }

  /// Carrega a lista de workers cadastrados no Firestore (coleção 'workers')
  Future<void> _loadWorkers() async {
    try {
      final snapshot =
          await FirebaseFirestore.instance.collection('workers').get();
      List<String> workers = [];
      for (var doc in snapshot.docs) {
        final data = doc.data();
        final firstName = data['firstName'] ?? "";
        final lastName = data['lastName'] ?? "";
        final fullName = (firstName + " " + lastName).trim();
        if (fullName.isNotEmpty) {
          workers.add(fullName);
        }
      }
      // Ordena alfabeticamente
      workers.sort();
      setState(() {
        _workerOptions = workers;
      });
    } catch (e) {
      print("Error loading workers: $e");
    }
  }

  // Define erro no Name (4 bordas vermelhas)
  void setNameError(bool value) {
    setState(() {
      _nameError = value;
    });
  }

  // Define erro no Hours
  void setHoursError(bool value) {
    setState(() {
      _hoursError = value;
    });
  }

  // Reseta o dropdown para o placeholder
  void resetDropdown() {
    setState(() {
      _selectedName = null;
      widget.nameController.clear();
      _nameError = false;
    });
  }

  // Define o valor do dropdown (usado ao editar registro)
  void setDropdownValue(String newValue) {
    setState(() {
      if (_workerOptions.contains(newValue)) {
        _selectedName = newValue;
        widget.nameController.text = newValue;
      } else {
        _selectedName = null;
        widget.nameController.clear();
      }
      _nameError = false;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        // Dropdown para selecionar o worker
        GestureDetector(
          onTap: () {
            if (_nameError) {
              setState(() {
                _nameError = false;
              });
            }
          },
          child: Container(
            width: 294,
            height: 40,
            decoration: BoxDecoration(
              color: const Color(0xFFFEFFE4),
              border: Border.all(
                color: _nameError ? Colors.red : const Color(0xFF0205D3),
                width: 2,
              ),
              borderRadius: const BorderRadius.only(
                topLeft: Radius.circular(5),
                topRight: Radius.circular(5),
              ),
            ),
            child: DropdownButtonHideUnderline(
              child: DropdownButton<String>(
                isExpanded: true,
                icon: const Icon(Icons.arrow_drop_down),
                iconSize: 24,
                style: const TextStyle(
                  fontFamily: 'Barlow',
                  fontSize: 20,
                  color: Color(0xFF3D3D3D),
                ),
                hint: const Center(
                  child: Text(
                    'Name',
                    style: TextStyle(fontSize: 20, color: Color(0xFF9C9C9C)),
                    textAlign: TextAlign.center,
                  ),
                ),
                value: _selectedName,
                items: _workerOptions
                    .map<DropdownMenuItem<String>>((String value) {
                  return DropdownMenuItem<String>(
                    value: value,
                    child: Center(child: Text(value)),
                  );
                }).toList(),
                onChanged: (String? newValue) {
                  setState(() {
                    _selectedName = newValue;
                    widget.nameController.text = newValue ?? '';
                    _nameError = false;
                  });
                },
              ),
            ),
          ),
        ),
        // A seguir, o restante dos campos (barra azul e inputs) permanece inalterado.
        Container(
          width: 294,
          height: 20,
          color: const Color(0xFF0205D3),
          child: Row(
            children: [
              _buildTitle('Start', 65),
              _buildTitle('Finish', 65),
              _buildTitle('Hours', 50),
              _buildTitle('Travel', 50),
              _buildTitle('Meal', 50),
            ],
          ),
        ),
        Container(
          width: 294,
          height: 30,
          decoration: BoxDecoration(
            color: const Color(0xFFFEFFE4),
            border: Border.all(
              color: const Color(0xFF0205D3),
              width: 2,
            ),
            borderRadius: const BorderRadius.only(
              bottomLeft: Radius.circular(5),
              bottomRight: Radius.circular(5),
            ),
          ),
          child: Row(
            children: [
              _buildStartFinishField(widget.startController,
                  width: 65, drawRightBorder: true),
              _buildStartFinishField(widget.finishController,
                  width: 65, drawRightBorder: true),
              _buildHoursField(widget.hoursController,
                  width: 50, drawRightBorder: true),
              _buildDecimalField(widget.travelController,
                  width: 50, drawRightBorder: true),
              _buildNumberField(widget.mealController,
                  width: 50, drawRightBorder: false),
            ],
          ),
        ),
      ],
    );
  }

  Widget _buildTitle(String text, double width) {
    return Container(
      width: width,
      alignment: Alignment.center,
      child: Text(
        text,
        style: const TextStyle(
          fontFamily: 'Roboto',
          fontSize: 14,
          fontWeight: FontWeight.bold,
          color: Colors.white,
        ),
        textAlign: TextAlign.center,
      ),
    );
  }

  Widget _buildStartFinishField(
    TextEditingController controller, {
    required double width,
    required bool drawRightBorder,
  }) {
    return Container(
      width: width,
      alignment: Alignment.center,
      decoration: BoxDecoration(
        border: Border(
          right: drawRightBorder
              ? const BorderSide(color: Color(0xFF0205D3), width: 1)
              : BorderSide.none,
        ),
      ),
      child: TextField(
        controller: controller,
        textAlign: TextAlign.center,
        style: const TextStyle(
          fontFamily: 'Barlow',
          fontSize: 16,
          color: Color(0xFF3D3D3D),
        ),
        keyboardType: TextInputType.number,
        inputFormatters: [TimeTextFormatter()],
        decoration: const InputDecoration(
          border: InputBorder.none,
          contentPadding: EdgeInsets.zero,
          isDense: true,
        ),
      ),
    );
  }

  Widget _buildHoursField(
    TextEditingController controller, {
    required double width,
    required bool drawRightBorder,
  }) {
    return Container(
      width: width,
      alignment: Alignment.center,
      decoration: BoxDecoration(
        border: Border(
          right: drawRightBorder
              ? const BorderSide(color: Color(0xFF0205D3), width: 1)
              : BorderSide.none,
        ),
      ),
      child: TextField(
        controller: controller,
        focusNode: _hoursFocus,
        textAlign: TextAlign.center,
        style: const TextStyle(
          fontFamily: 'Barlow',
          fontSize: 16,
          color: Color(0xFF3D3D3D),
        ),
        keyboardType: const TextInputType.numberWithOptions(decimal: true),
        inputFormatters: [
          FilteringTextInputFormatter.allow(RegExp(r'^\d*\.?\d*$')),
        ],
        decoration: InputDecoration(
          isDense: true,
          contentPadding: EdgeInsets.zero,
          enabledBorder: _hoursError
              ? OutlineInputBorder(
                  borderRadius: BorderRadius.zero,
                  borderSide: const BorderSide(color: Colors.red, width: 2),
                )
              : InputBorder.none,
          focusedBorder: _hoursError
              ? OutlineInputBorder(
                  borderRadius: BorderRadius.zero,
                  borderSide: const BorderSide(color: Colors.red, width: 2),
                )
              : OutlineInputBorder(
                  borderRadius: BorderRadius.zero,
                  borderSide: const BorderSide(color: Colors.transparent),
                ),
        ),
      ),
    );
  }

  Widget _buildDecimalField(
    TextEditingController controller, {
    required double width,
    required bool drawRightBorder,
  }) {
    return Container(
      width: width,
      alignment: Alignment.center,
      decoration: BoxDecoration(
        border: Border(
          right: drawRightBorder
              ? const BorderSide(color: Color(0xFF0205D3), width: 1)
              : BorderSide.none,
        ),
      ),
      child: TextField(
        controller: controller,
        textAlign: TextAlign.center,
        style: const TextStyle(
          fontFamily: 'Barlow',
          fontSize: 16,
          color: Color(0xFF3D3D3D),
        ),
        keyboardType: const TextInputType.numberWithOptions(decimal: true),
        inputFormatters: [
          FilteringTextInputFormatter.allow(RegExp(r'^\d*\.?\d*$')),
        ],
        decoration: const InputDecoration(
          border: InputBorder.none,
          isDense: true,
          contentPadding: EdgeInsets.zero,
        ),
      ),
    );
  }

  Widget _buildNumberField(
    TextEditingController controller, {
    required double width,
    required bool drawRightBorder,
  }) {
    return Container(
      width: width,
      alignment: Alignment.center,
      decoration: BoxDecoration(
        border: Border(
          right: drawRightBorder
              ? const BorderSide(color: Color(0xFF0205D3), width: 1)
              : BorderSide.none,
        ),
      ),
      child: TextField(
        controller: controller,
        textAlign: TextAlign.center,
        style: const TextStyle(
          fontFamily: 'Barlow',
          fontSize: 16,
          color: Color(0xFF3D3D3D),
        ),
        keyboardType: TextInputType.number,
        inputFormatters: [FilteringTextInputFormatter.digitsOnly],
        decoration: const InputDecoration(
          border: InputBorder.none,
          isDense: true,
          contentPadding: EdgeInsets.zero,
        ),
      ),
    );
  }
}
import 'package:flutter/material.dart';

class CustomMultilineInputField extends StatelessWidget {
  final String label;
  final String hintText;
  final TextEditingController? controller;
  final bool error;
  final FocusNode? focusNode;
  final VoidCallback? onClearError;

  const CustomMultilineInputField({
    Key? key,
    required this.label,
    required this.hintText,
    this.controller,
    this.error = false,
    this.focusNode,
    this.onClearError,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    const Color appBlueColor = Color(0xFF0205D3);
    const Color appYellowColor = Color(0xFFFFFDD0);

    final double fieldWidth = MediaQuery.of(context).size.width - 20;

    return Container(
      width: fieldWidth < 0 ? 0 : fieldWidth,
      height: 120,
      decoration: error
          ? BoxDecoration(
              boxShadow: [
                BoxShadow(
                  color: Colors.redAccent.withOpacity(0.3),
                  blurRadius: 4,
                  offset: const Offset(0, 2),
                ),
              ],
            )
          : null,
      child: TextField(
        controller: controller,
        focusNode: focusNode,
        maxLines: null,
        expands: true,
        textCapitalization: TextCapitalization.sentences,
        style: const TextStyle(
          fontSize: 16,
          color: Colors.black,
        ),
        textAlignVertical: TextAlignVertical.top,
        onTap: () {
          if (error && onClearError != null) {
            onClearError!();
          }
        },
        decoration: InputDecoration(
          labelText: label,
          labelStyle: const TextStyle(
            fontWeight: FontWeight.bold,
            fontSize: 16,
            color: Colors.black,
          ),
          floatingLabelStyle: const TextStyle(
            fontWeight: FontWeight.bold,
            fontSize: 12,
            color: appBlueColor,
            height: 0.8,
          ),
          hintText: hintText,
          hintStyle: const TextStyle(
            fontWeight: FontWeight.bold,
            color: Colors.grey,
          ),
          filled: true,
          fillColor: appYellowColor,
          enabledBorder: const OutlineInputBorder(
            borderSide: BorderSide(color: appBlueColor, width: 1),
          ),
          focusedBorder: const OutlineInputBorder(
            borderSide: BorderSide(color: appBlueColor, width: 2),
          ),
          border: const OutlineInputBorder(
            borderSide: BorderSide(color: appBlueColor, width: 1),
          ),
          errorText: error ? ' ' : null,
          errorStyle: const TextStyle(fontSize: 0, height: 0),
          contentPadding: const EdgeInsets.symmetric(
            horizontal: 12,
            vertical: 8,
          ),
        ),
      ),
    );
  }
}
import 'package:flutter/material.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:google_fonts/google_fonts.dart';

class BaseLayout extends StatelessWidget {
  final Widget child; // Conteúdo principal da página
  final String title; // Texto do cabeçalho flutuante

  const BaseLayout({
    Key? key,
    required this.child,
    required this.title,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Column(
        children: [
          // Cabeçalho flutuante dentro de SafeArea
          SafeArea(
            bottom: false,
            child: Container(
              height: 60, // Altura do cabeçalho
              padding: const EdgeInsets.symmetric(horizontal: 16),
              decoration: const BoxDecoration(
                color: Colors.white,
                boxShadow: [
                  BoxShadow(
                    color: Colors.black26,
                    offset: Offset(0, 2),
                    blurRadius: 4,
                  ),
                ],
              ),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                crossAxisAlignment: CrossAxisAlignment.center,
                children: [
                  // Ícone de menu suspenso (três barras horizontais)
                  PopupMenuButton<String>(
                    icon: const Icon(
                      Icons.menu,
                      color: Color(0xFF0205D3),
                      size: 40, // Tamanho do ícone
                    ),
                    onSelected: (value) async {
                      if (value == 'Home') {
                        // Navega para /home e remove todas as rotas anteriores
                        Navigator.pushNamedAndRemoveUntil(
                          context,
                          '/home',
                          (route) => false,
                        );
                      } else if (value == 'Logout') {
                        // Faz logout no Firebase e vai para /login
                        await FirebaseAuth.instance.signOut();
                        Navigator.pushNamedAndRemoveUntil(
                          context,
                          '/login',
                          (route) => false,
                        );
                      }
                    },
                    itemBuilder: (context) => const [
                      PopupMenuItem(
                        value: 'Home',
                        child: Text('Home'),
                      ),
                      PopupMenuItem(
                        value: 'Logout',
                        child: Text('Logout'),
                      ),
                    ],
                  ),

                  // Título centralizado
                  Text(
                    title,
                    textAlign: TextAlign.center,
                    style: GoogleFonts.raleway(
                      fontSize: 30, // Tamanho maior da fonte
                      fontWeight: FontWeight.w800, // Peso da fonte
                      color: Color(0xFF0205D3), // Azul
                    ),
                  ),

                  // Placeholder para balancear o espaço
                  const SizedBox(width: 40),
                ],
              ),
            ),
          ),

          // Conteúdo principal diretamente abaixo do cabeçalho
          Expanded(
            child: child,
          ),
        ],
      ),
    );
  }
}
import 'package:flutter/material.dart';
import 'package:intl/intl.dart';

class DatePickerInput extends StatefulWidget {
  final String label;
  final String hintText;
  final TextEditingController? controller;
  final bool error;
  final FocusNode? focusNode;
  final void Function(DateTime?)? onDateSelected;

  const DatePickerInput({
    Key? key,
    required this.label,
    required this.hintText,
    this.controller,
    this.error = false,
    this.focusNode,
    this.onDateSelected,
  }) : super(key: key);

  @override
  _DatePickerInputState createState() => _DatePickerInputState();
}

class _DatePickerInputState extends State<DatePickerInput> {
  late TextEditingController _localController;

  @override
  void initState() {
    super.initState();
    _localController = widget.controller ?? TextEditingController();
  }

  Future<void> _selectDate(BuildContext context) async {
    widget.focusNode?.requestFocus();
    final picked = await showDatePicker(
      context: context,
      initialDate: DateTime.now(),
      firstDate: DateTime(2000),
      lastDate: DateTime(2100),
    );
    if (picked != null) {
      setState(() {
        _localController.text = DateFormat('M/d/yy, EEEE').format(picked);
        if (widget.onDateSelected != null) {
          widget.onDateSelected!(picked);
        }
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    const Color appBlueColor = Color(0xFF0205D3);
    const Color appYellowColor = Color(0xFFFFFDD0);

    final double fieldWidth = MediaQuery.of(context).size.width - 20;

    return Container(
      width: fieldWidth < 0 ? 0 : fieldWidth,
      height: 40,
      decoration: widget.error
          ? BoxDecoration(
              boxShadow: [
                BoxShadow(
                  color: Colors.redAccent.withOpacity(0.3),
                  blurRadius: 4,
                  offset: const Offset(0, 2),
                ),
              ],
            )
          : null,
      child: TextField(
        readOnly: true,
        controller: _localController,
        focusNode: widget.focusNode,
        style: const TextStyle(fontSize: 16, color: Colors.black),
        textAlignVertical: TextAlignVertical.center,
        onTap: () => _selectDate(context),
        decoration: InputDecoration(
          labelText: widget.label,
          labelStyle: const TextStyle(
            fontWeight: FontWeight.bold,
            fontSize: 16,
            color: Colors.black,
          ),
          floatingLabelStyle: const TextStyle(
            fontWeight: FontWeight.bold,
            fontSize: 12,
            color: appBlueColor,
          ),
          hintText: widget.hintText,
          hintStyle: const TextStyle(
            fontWeight: FontWeight.bold,
            color: Colors.grey,
          ),
          filled: true,
          fillColor: appYellowColor,
          enabledBorder: const OutlineInputBorder(
            borderSide: BorderSide(color: appBlueColor, width: 1),
          ),
          focusedBorder: const OutlineInputBorder(
            borderSide: BorderSide(color: appBlueColor, width: 2),
          ),
          border: const OutlineInputBorder(
            borderSide: BorderSide(color: appBlueColor, width: 1),
          ),
          errorText: widget.error ? ' ' : null,
          errorStyle: const TextStyle(fontSize: 0, height: 0),
          contentPadding:
              const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
        ),
      ),
    );
  }
}
import 'package:flutter/material.dart';

class TimeSheetRowItem extends StatefulWidget {
  final String day;
  final String month;
  final String jobName;
  final String userName;
  final bool initialChecked;
  final ValueChanged<bool>? onCheckChanged;

  const TimeSheetRowItem({
    Key? key,
    required this.day,
    required this.month,
    required this.jobName,
    required this.userName,
    this.initialChecked = false,
    this.onCheckChanged,
  }) : super(key: key);

  @override
  State<TimeSheetRowItem> createState() => _TimeSheetRowItemState();
}

class _TimeSheetRowItemState extends State<TimeSheetRowItem> {
  bool _isChecked = false;

  @override
  void initState() {
    super.initState();
    // Define o estado local inicialmente com base na prop
    _isChecked = widget.initialChecked;
  }

  /// Se o pai mudar o `initialChecked` (por ex: "Select All"),
  /// sincronizamos `_isChecked` para refletir a nova prop.
  @override
  void didUpdateWidget(covariant TimeSheetRowItem oldWidget) {
    super.didUpdateWidget(oldWidget);
    if (oldWidget.initialChecked != widget.initialChecked) {
      setState(() {
        _isChecked = widget.initialChecked;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Container(
      margin: const EdgeInsets.only(left: 10),
      child: Center(
        child: SizedBox(
          width: 328,
          child: Row(
            children: [
              // CONTAINER PRINCIPAL (borda azul) - 288px de largura
              Container(
                width: 288,
                height: 45,
                decoration: BoxDecoration(
                  color: const Color(0xFFFFFFD0), // Fundo amarelo claro
                  border: Border.all(color: const Color(0xFF0205D3), width: 1),
                  borderRadius: BorderRadius.circular(5),
                ),
                clipBehavior: Clip.antiAlias,
                child: Row(
                  children: [
                    // 1) DIA E MÊS (40 px)
                    Container(
                      width: 40,
                      decoration: const BoxDecoration(
                        color: Color(0xFFE8E5FF),
                        borderRadius: BorderRadius.only(
                          topLeft: Radius.circular(5),
                          bottomLeft: Radius.circular(5),
                        ),
                      ),
                      child: Column(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          SizedBox(
                            height: 25,
                            child: FittedBox(
                              fit: BoxFit.scaleDown,
                              child: Text(
                                widget.day,
                                style: const TextStyle(
                                  fontSize: 22,
                                  fontWeight: FontWeight.bold,
                                  color: Color(0xFFFF0000),
                                ),
                              ),
                            ),
                          ),
                          SizedBox(
                            height: 16,
                            child: FittedBox(
                              fit: BoxFit.scaleDown,
                              child: Text(
                                widget.month,
                                style: const TextStyle(
                                  fontSize: 13,
                                  fontWeight: FontWeight.bold,
                                  color: Color(0xFF000000),
                                ),
                              ),
                            ),
                          ),
                        ],
                      ),
                    ),
                    // 2) NOME DO JOB (170 px)
                    Container(
                      width: 170,
                      alignment: Alignment.center,
                      padding: const EdgeInsets.symmetric(horizontal: 8),
                      child: Text(
                        widget.jobName,
                        maxLines: 2,
                        overflow: TextOverflow.ellipsis,
                        textAlign: TextAlign.center,
                        style: const TextStyle(
                          fontSize: 13,
                          color: Color(0xFF3B3B3B),
                        ),
                      ),
                    ),
                    // LINHA VERTICAL BRANCA
                    Container(
                        width: 2, height: double.infinity, color: Colors.white),
                    // 3) NOME DO USUÁRIO (72 px)
                    Container(
                      width: 72,
                      alignment: Alignment.center,
                      padding: const EdgeInsets.symmetric(horizontal: 4),
                      child: Text(
                        widget.userName,
                        maxLines: 2,
                        overflow: TextOverflow.ellipsis,
                        textAlign: TextAlign.center,
                        style: const TextStyle(
                          fontSize: 10,
                          fontStyle: FontStyle.italic,
                          color: Color(0xFF3B3B3B),
                        ),
                      ),
                    ),
                  ],
                ),
              ),
              // CHECKBOX FORA DA BORDA AZUL - 40px
              SizedBox(
                width: 40,
                child: Center(
                  child: Checkbox(
                    value: _isChecked,
                    onChanged: (newValue) {
                      final checked = newValue ?? false;
                      setState(() {
                        _isChecked = checked;
                      });
                      // Notifica o pai
                      if (widget.onCheckChanged != null) {
                        widget.onCheckChanged!(checked);
                      }
                    },
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';

class LogoText extends StatelessWidget {
  const LogoText({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Container(
      width: 330, // Largura da caixa
      height: 140, // Altura da caixa
      decoration: BoxDecoration(
        border: Border.all(color: const Color(0xFF0205D3), width: 5), // Contorno azul
        borderRadius: BorderRadius.circular(20), // Bordas arredondadas
      ),
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Text(
            'Central Island',
            style: GoogleFonts.poppins(
              fontSize: 42, // Tamanho da fonte
              fontWeight: FontWeight.w800, // Negrito
              color: const Color(0xFF0205D3), // Azul
              letterSpacing: -1.5, // Redução do espaçamento entre letras
            ),
          ),
          Text(
            'Floors',
            style: GoogleFonts.poppins(
              fontSize: 42, // Tamanho da fonte
              fontWeight: FontWeight.w800, // Negrito
              color: const Color(0xFF0205D3), // Azul
              letterSpacing: -1.5, // Redução do espaçamento entre letras
            ),
          ),
        ],
      ),
    );
  }
}
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';

class CustomInputField extends StatelessWidget {
  final String label;
  final String hintText;
  final TextEditingController? controller;
  final bool error;
  final FocusNode? focusNode;
  final VoidCallback? onClearError;
  final TextInputType? keyboardType;
  final List<TextInputFormatter>? inputFormatters;
  final String? prefixText;

  const CustomInputField({
    Key? key,
    required this.label,
    required this.hintText,
    this.controller,
    this.error = false,
    this.focusNode,
    this.onClearError,
    this.keyboardType,
    this.inputFormatters,
    this.prefixText,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    const Color appBlueColor = Color(0xFF0205D3);
    const Color appYellowColor = Color(0xFFFFFDD0);
    final double fieldWidth = MediaQuery.of(context).size.width - 20;

    return Container(
      width: fieldWidth < 0 ? 0 : fieldWidth,
      height: 40,
      decoration: error
          ? BoxDecoration(
              boxShadow: [
                BoxShadow(
                  color: Colors.redAccent.withOpacity(0.3),
                  blurRadius: 4,
                  offset: const Offset(0, 2),
                ),
              ],
            )
          : null,
      child: TextField(
        controller: controller,
        focusNode: focusNode,
        keyboardType: keyboardType,
        inputFormatters: inputFormatters,
        textCapitalization: TextCapitalization.words,
        style: const TextStyle(
          fontSize: 16,
          color: Colors.black,
        ),
        textAlignVertical: TextAlignVertical.center,
        onTap: () {
          if (error && onClearError != null) {
            onClearError!();
          }
        },
        decoration: InputDecoration(
          labelText: label,
          labelStyle: const TextStyle(
            fontWeight: FontWeight.bold,
            fontSize: 16,
            color: Colors.black,
          ),
          floatingLabelStyle: const TextStyle(
            fontWeight: FontWeight.bold,
            fontSize: 12,
            color: appBlueColor,
          ),
          hintText: hintText,
          hintStyle: const TextStyle(
            fontWeight: FontWeight.bold,
            color: Colors.grey,
          ),
          prefixText: prefixText,
          filled: true,
          fillColor: appYellowColor,
          enabledBorder: const OutlineInputBorder(
            borderSide: BorderSide(color: appBlueColor, width: 1),
          ),
          focusedBorder: const OutlineInputBorder(
            borderSide: BorderSide(color: appBlueColor, width: 2),
          ),
          border: const OutlineInputBorder(
            borderSide: BorderSide(color: appBlueColor, width: 1),
          ),
          errorText: error ? ' ' : null,
          errorStyle: const TextStyle(fontSize: 0, height: 0),
          contentPadding: const EdgeInsets.symmetric(
            horizontal: 12,
            vertical: 8,
          ),
        ),
      ),
    );
  }
}
import 'package:flutter/material.dart';

enum MiniButtonType {
  saveMiniButton,
  cancelMiniButton,
  clearMiniButton,
  addMiniButton,
  noteMiniButton,
  sortMiniButton,
  deleteMiniButton,
  editMiniButton,
  rangeMiniButton,
  ascMiniButton,
  descMiniButton,
  applyMiniButton,
  clearAllMiniButton,
  closeMiniButton,
  selectAllMiniButton, // <--- Adicionado
  deselectAllMiniButton, // <--- Adicionado
}

class CustomMiniButton extends StatelessWidget {
  final MiniButtonType type;
  final VoidCallback onPressed;

  const CustomMiniButton({
    Key? key,
    required this.type,
    required this.onPressed,
  }) : super(key: key);

  static const double _miniButtonHeight = 25.0;
  static const double _defaultButtonWidth = 60.0;
  static const double _buttonBorderWidth = 4.0;
  static const double _fontSize = 14.0;
  static const double _borderRadius = 5.0;

  Map<String, dynamic> _getButtonConfig() {
    switch (type) {
      case MiniButtonType.saveMiniButton:
        return {
          'label': 'Save',
          'backgroundColor': const Color(0xFF17DB4E),
          'borderColor': const Color(0xFF17DB4E),
          'textColor': Colors.white,
          'width': _defaultButtonWidth,
          'height': _miniButtonHeight,
        };
      case MiniButtonType.cancelMiniButton:
        return {
          'label': 'Cancel',
          'backgroundColor': const Color(0xFFDE4545),
          'borderColor': const Color(0xFFDE4545),
          'textColor': Colors.white,
          'width': _defaultButtonWidth,
          'height': _miniButtonHeight,
        };
      case MiniButtonType.clearMiniButton:
        return {
          'label': 'Clear',
          'backgroundColor': const Color(0xFFFAB515),
          'borderColor': const Color(0xFFFAB515),
          'textColor': Colors.white,
          'width': _defaultButtonWidth,
          'height': _miniButtonHeight,
        };
      case MiniButtonType.addMiniButton:
        return {
          'label': 'Add',
          'backgroundColor': const Color(0xFF17DB4E),
          'borderColor': const Color(0xFF17DB4E),
          'textColor': Colors.white,
          'width': _defaultButtonWidth,
          'height': _miniButtonHeight,
        };
      case MiniButtonType.noteMiniButton:
        return {
          'label': 'Note',
          'backgroundColor': const Color(0xFF4287F5),
          'borderColor': const Color(0xFF4287F5),
          'textColor': Colors.white,
          'width': _defaultButtonWidth,
          'height': _miniButtonHeight,
        };
      case MiniButtonType.sortMiniButton:
        return {
          'label': 'Sort',
          'backgroundColor': const Color(0xFF9C27B0),
          'borderColor': const Color(0xFF9C27B0),
          'textColor': Colors.white,
          'width': _defaultButtonWidth,
          'height': _miniButtonHeight,
        };
      case MiniButtonType.deleteMiniButton:
        return {
          'label': 'Delete',
          'backgroundColor': const Color(0xFFFF0000),
          'borderColor': const Color(0xFFFF0000),
          'textColor': Colors.white,
          'width': _defaultButtonWidth,
          'height': _miniButtonHeight,
        };
      case MiniButtonType.editMiniButton:
        return {
          'label': 'Edit',
          'backgroundColor': const Color(0xFF2196F3),
          'borderColor': const Color(0xFF2196F3),
          'textColor': Colors.white,
          'width': _defaultButtonWidth,
          'height': _miniButtonHeight,
        };
      case MiniButtonType.rangeMiniButton:
        return {
          'label': 'Range',
          'backgroundColor': const Color(0xFF0277BD),
          'borderColor': const Color(0xFF0277BD),
          'textColor': Colors.white,
          'width': _defaultButtonWidth,
          'height': _miniButtonHeight,
        };
      case MiniButtonType.ascMiniButton:
        return {
          'label': 'Asc',
          'backgroundColor': const Color(0xFF0205D3),
          'borderColor': const Color(0xFF0205D3),
          'textColor': Colors.white,
          'width': 45.0,
          'height': _miniButtonHeight,
        };
      case MiniButtonType.descMiniButton:
        return {
          'label': 'Desc',
          'backgroundColor': const Color(0xFF0205D3),
          'borderColor': const Color(0xFF0205D3),
          'textColor': Colors.white,
          'width': 50.0,
          'height': _miniButtonHeight,
        };
      case MiniButtonType.applyMiniButton:
        return {
          'label': 'Apply',
          'backgroundColor': const Color(0xFF17DB4E),
          'borderColor': const Color(0xFF17DB4E),
          'textColor': Colors.white,
          'width': _defaultButtonWidth,
          'height': _miniButtonHeight,
        };
      case MiniButtonType.clearAllMiniButton:
        return {
          'label': 'Clear',
          'backgroundColor': const Color(0xFFFF0000),
          'borderColor': const Color(0xFFFF0000),
          'textColor': Colors.white,
          'width': _defaultButtonWidth,
          'height': _miniButtonHeight,
        };
      case MiniButtonType.closeMiniButton:
        return {
          'label': 'Close',
          'backgroundColor': const Color(0xFF757575),
          'borderColor': const Color(0xFF757575),
          'textColor': Colors.white,
          'width': _defaultButtonWidth,
          'height': _miniButtonHeight,
        };
      case MiniButtonType.selectAllMiniButton:
        return {
          'label': 'All',
          'backgroundColor': const Color(0xFF0205D3),
          'borderColor': const Color(0xFF0205D3),
          'textColor': Colors.white,
          'width': 50.0,
          'height': _miniButtonHeight,
        };
      case MiniButtonType.deselectAllMiniButton:
        return {
          'label': 'None',
          'backgroundColor': const Color(0xFF9E9E9E),
          'borderColor': const Color(0xFF9E9E9E),
          'textColor': Colors.white,
          'width': 50.0,
          'height': _miniButtonHeight,
        };
    }
  }

  @override
  Widget build(BuildContext context) {
    final config = _getButtonConfig();
    return SizedBox(
      width: config['width'],
      height: config['height'],
      child: ElevatedButton(
        onPressed: onPressed,
        style: ElevatedButton.styleFrom(
          backgroundColor: config['backgroundColor'],
          side: BorderSide(
            color: config['borderColor'],
            width: _buttonBorderWidth,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(_borderRadius),
          ),
          padding: EdgeInsets.zero,
        ),
        child: Center(
          child: Text(
            config['label'],
            style: TextStyle(
              fontSize: _fontSize,
              fontWeight: FontWeight.bold,
              color: config['textColor'],
            ),
            textAlign: TextAlign.center,
          ),
        ),
      ),
    );
  }
}
import 'package:flutter/material.dart';
import 'package:font_awesome_flutter/font_awesome_flutter.dart';

enum ButtonType {
  newButton,
  sheetsButton,
  receiptsButton,
  settingsButton,
  cancelButton,
  clearButton,
  nextButton,
  backButton,
  addWorkerButton,
  submitButton,
  editButton,
  pdfButton,
  addUserButton,
  loginButton,
  usersButton,
  workersButton,
  uploadReceiptButton,
  cardsButton,
  columnsButton,
  searchButton,
}

class CustomButton extends StatelessWidget {
  final ButtonType type;
  final VoidCallback onPressed;

  const CustomButton({
    Key? key,
    required this.type,
    required this.onPressed,
  }) : super(key: key);

  Map<String, dynamic> _getButtonConfig() {
    switch (type) {
      case ButtonType.newButton:
        return {
          'label': 'New',
          'faIcon': FontAwesomeIcons.plus,
          'backgroundColor': const Color(0xFF17DB4E),
          'borderColor': const Color(0xFF17DB4E),
          'iconColor': Colors.white,
          'textColor': Colors.white,
          'height': 60.0,
          'width': 60.0,
          'iconSize': 24.0,
          'textSize': 12.0,
          'lineHeight': 1.0,
          'iconSpacing': 4.0,
          'hasIcon': true,
        };
      case ButtonType.sheetsButton:
        return {
          'label': 'Sheets',
          'faIcon': FontAwesomeIcons.fileExcel,
          'backgroundColor': const Color(0xFF6E44FF),
          'borderColor': const Color(0xFF6E44FF),
          'iconColor': Colors.white,
          'textColor': Colors.white,
          'height': 60.0,
          'width': 60.0,
          'iconSize': 24.0,
          'textSize': 12.0,
          'lineHeight': 1.0,
          'iconSpacing': 4.0,
          'hasIcon': true,
        };
      case ButtonType.receiptsButton:
        return {
          'label': 'Receipts',
          'faIcon': FontAwesomeIcons.fileInvoiceDollar,
          'backgroundColor': const Color(0xFFFF9800),
          'borderColor': const Color(0xFFFF9800),
          'iconColor': Colors.white,
          'textColor': Colors.white,
          'height': 60.0,
          'width': 60.0,
          'iconSize': 24.0,
          'textSize': 12.0,
          'lineHeight': 1.0,
          'iconSpacing': 4.0,
          'hasIcon': true,
        };
      case ButtonType.settingsButton:
        return {
          'label': 'Settings',
          'faIcon': FontAwesomeIcons.cogs,
          'backgroundColor': const Color(0xFF444444),
          'borderColor': const Color(0xFF444444),
          'iconColor': Colors.white,
          'textColor': Colors.white,
          'height': 60.0,
          'width': 60.0,
          'iconSize': 24.0,
          'textSize': 12.0,
          'lineHeight': 1.0,
          'iconSpacing': 4.0,
          'hasIcon': true,
        };
      case ButtonType.cancelButton:
        return {
          'label': 'Cancel',
          'faIcon': FontAwesomeIcons.timesCircle,
          'backgroundColor': const Color(0xFFDE4545),
          'borderColor': const Color(0xFFDE4545),
          'iconColor': Colors.white,
          'textColor': Colors.white,
          'height': 60.0,
          'width': 60.0,
          'iconSize': 24.0,
          'textSize': 12.0,
          'lineHeight': 1.0,
          'iconSpacing': 4.0,
          'hasIcon': true,
        };
      case ButtonType.clearButton:
        return {
          'label': 'Clear',
          'faIcon': FontAwesomeIcons.broom,
          'backgroundColor': const Color(0xFFFAB515),
          'borderColor': const Color(0xFFFAB515),
          'iconColor': Colors.white,
          'textColor': Colors.white,
          'height': 60.0,
          'width': 60.0,
          'iconSize': 24.0,
          'textSize': 12.0,
          'lineHeight': 1.0,
          'iconSpacing': 4.0,
          'hasIcon': true,
        };
      case ButtonType.nextButton:
        return {
          'label': 'Next',
          'faIcon': FontAwesomeIcons.arrowRight,
          'backgroundColor': const Color(0xFF0205D3),
          'borderColor': const Color(0xFF0205D3),
          'iconColor': Colors.white,
          'textColor': Colors.white,
          'height': 60.0,
          'width': 60.0,
          'iconSize': 24.0,
          'textSize': 12.0,
          'lineHeight': 1.0,
          'iconSpacing': 4.0,
          'hasIcon': true,
        };
      case ButtonType.backButton:
        return {
          'label': 'Back',
          'faIcon': FontAwesomeIcons.arrowLeft,
          'backgroundColor': const Color(0xFF0205D3),
          'borderColor': const Color(0xFF0205D3),
          'iconColor': Colors.white,
          'textColor': Colors.white,
          'height': 60.0,
          'width': 60.0,
          'iconSize': 24.0,
          'textSize': 12.0,
          'lineHeight': 1.0,
          'iconSpacing': 4.0,
          'hasIcon': true,
        };
      case ButtonType.addWorkerButton:
        return {
          'label': 'Add',
          'faIcon': FontAwesomeIcons.userPlus,
          'backgroundColor': const Color(0xFF17DB4E),
          'borderColor': const Color(0xFF17DB4E),
          'iconColor': Colors.white,
          'textColor': Colors.white,
          'height': 60.0,
          'width': 60.0,
          'iconSize': 24.0,
          'textSize': 12.0,
          'lineHeight': 1.0,
          'iconSpacing': 4.0,
          'hasIcon': true,
        };
      case ButtonType.submitButton:
        return {
          'label': 'Submit',
          'faIcon': FontAwesomeIcons.checkCircle,
          'backgroundColor': const Color(0xFF17DB4E),
          'borderColor': const Color(0xFF17DB4E),
          'iconColor': Colors.white,
          'textColor': Colors.white,
          'height': 60.0,
          'width': 60.0,
          'iconSize': 24.0,
          'textSize': 12.0,
          'lineHeight': 1.0,
          'iconSpacing': 4.0,
          'hasIcon': true,
        };
      case ButtonType.editButton:
        return {
          'label': 'Edit',
          'faIcon': FontAwesomeIcons.edit,
          'backgroundColor': const Color(0xFF2196F3),
          'borderColor': const Color(0xFF2196F3),
          'iconColor': Colors.white,
          'textColor': Colors.white,
          'height': 60.0,
          'width': 60.0,
          'iconSize': 24.0,
          'textSize': 12.0,
          'lineHeight': 1.0,
          'iconSpacing': 4.0,
          'hasIcon': true,
        };
      case ButtonType.pdfButton:
        return {
          'label': 'PDF',
          'faIcon': FontAwesomeIcons.filePdf,
          'backgroundColor': const Color(0xFFFF0000),
          'borderColor': const Color(0xFFFF0000),
          'iconColor': Colors.white,
          'textColor': Colors.white,
          'height': 60.0,
          'width': 60.0,
          'iconSize': 22.0,
          'textSize': 12.0,
          'lineHeight': 1.0,
          'iconSpacing': 4.0,
          'hasIcon': true,
        };
      case ButtonType.addUserButton:
        return {
          'label': 'Add user',
          'faIcon': FontAwesomeIcons.userPlus,
          'backgroundColor': const Color(0xFF17DB4E),
          'borderColor': const Color(0xFF17DB4E),
          'iconColor': Colors.white,
          'textColor': Colors.white,
          'height': 60.0,
          'width': 60.0,
          'iconSize': 22.0,
          'textSize': 10.0,
          'lineHeight': 1.0,
          'iconSpacing': 4.0,
          'hasIcon': true,
        };
      case ButtonType.loginButton:
        return {
          'label': 'Login',
          'faIcon': FontAwesomeIcons.signInAlt,
          'backgroundColor': const Color(0xFF17DB4E),
          'borderColor': const Color(0xFF17DB4E),
          'iconColor': Colors.white,
          'textColor': Colors.white,
          'height': 60.0,
          'width': 60.0,
          'iconSize': 24.0,
          'textSize': 12.0,
          'lineHeight': 1.0,
          'iconSpacing': 4.0,
          'hasIcon': true,
        };
      case ButtonType.usersButton:
        return {
          'label': 'Users',
          'faIcon': FontAwesomeIcons.users,
          'backgroundColor': const Color(0xFF009688),
          'borderColor': const Color(0xFF009688),
          'iconColor': Colors.white,
          'textColor': Colors.white,
          'height': 60.0,
          'width': 60.0,
          'iconSize': 24.0,
          'textSize': 12.0,
          'lineHeight': 1.0,
          'iconSpacing': 4.0,
          'hasIcon': true,
        };
      case ButtonType.workersButton:
        return {
          'label': 'Workers',
          'faIcon': FontAwesomeIcons.users,
          'backgroundColor': const Color(0xFF6B4423),
          'borderColor': const Color(0xFF6B4423),
          'iconColor': Colors.white,
          'textColor': Colors.white,
          'height': 60.0,
          'width': 60.0,
          'iconSize': 24.0,
          'textSize': 12.0,
          'lineHeight': 1.0,
          'iconSpacing': 4.0,
          'hasIcon': true,
        };
      case ButtonType.uploadReceiptButton:
        return {
          'label': 'Upload',
          'faIcon': FontAwesomeIcons.cloudUploadAlt,
          'backgroundColor': const Color(0xFF0277BD),
          'borderColor': const Color(0xFF0277BD),
          'iconColor': Colors.white,
          'textColor': Colors.white,
          'height': 60.0,
          'width': 60.0,
          'iconSize': 24.0,
          'textSize': 12.0,
          'lineHeight': 1.0,
          'iconSpacing': 4.0,
          'hasIcon': true,
        };
      case ButtonType.cardsButton:
        return {
          'label': 'Cards',
          'faIcon': FontAwesomeIcons.creditCard,
          'backgroundColor': const Color(0xFFD81B60),
          'borderColor': const Color(0xFFD81B60),
          'iconColor': Colors.white,
          'textColor': Colors.white,
          'height': 60.0,
          'width': 60.0,
          'iconSize': 24.0,
          'textSize': 12.0,
          'lineHeight': 1.0,
          'iconSpacing': 4.0,
          'hasIcon': true,
        };
      case ButtonType.columnsButton:
        return {
          'label': 'Columns',
          'faIcon': FontAwesomeIcons.columns,
          'backgroundColor': const Color(0xFFBDBDBD),
          'borderColor': const Color(0xFFBDBDBD),
          'iconColor': Colors.white,
          'textColor': Colors.white,
          'height': 60.0,
          'width': 60.0,
          'iconSize': 24.0,
          'textSize': 12.0,
          'lineHeight': 1.0,
          'iconSpacing': 4.0,
          'hasIcon': true,
        };
      case ButtonType.searchButton:
        return {
          'label': 'Search',
          'faIcon': FontAwesomeIcons.search,
          'backgroundColor': const Color(0xFF3F51B5),
          'borderColor': const Color(0xFF3F51B5),
          'iconColor': Colors.white,
          'textColor': Colors.white,
          'height': 60.0,
          'width': 60.0,
          'iconSize': 24.0,
          'textSize': 12.0,
          'lineHeight': 1.0,
          'iconSpacing': 4.0,
          'hasIcon': true,
        };
    }
  }

  @override
  Widget build(BuildContext context) {
    final config = _getButtonConfig();
    return SizedBox(
      width: config['width'],
      height: config['height'],
      child: ElevatedButton(
        onPressed: onPressed,
        style: ElevatedButton.styleFrom(
          backgroundColor: config['backgroundColor'],
          side: BorderSide(
            color: config['borderColor'],
            width: 3.0,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(5.0),
          ),
          padding: EdgeInsets.zero,
        ),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            if (config['hasIcon']) ...[
              FaIcon(
                config['faIcon'],
                size: config['iconSize'],
                color: config['iconColor'],
              ),
              SizedBox(height: config['iconSpacing']),
            ],
            Text(
              config['label'],
              style: TextStyle(
                fontSize: config['textSize'],
                fontWeight: FontWeight.bold,
                color: config['textColor'],
                height: config['lineHeight'],
              ),
              textAlign: TextAlign.center,
            ),
          ],
        ),
      ),
    );
  }
}
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';

class CustomDropdownField extends StatelessWidget {
  final String label;
  final String hintText;
  final bool error;
  final FocusNode? focusNode;
  final VoidCallback? onClearError;
  final String? prefixText;

  /// Lista de itens do dropdown. Ex: ["1234", "2345", ...]
  final List<String> items;

  /// Valor atualmente selecionado
  final String? value;

  /// Callback ao selecionar um novo valor
  final ValueChanged<String?>? onChanged;

  const CustomDropdownField({
    Key? key,
    required this.label,
    required this.hintText,
    required this.items,
    this.value,
    this.onChanged,
    this.error = false,
    this.focusNode,
    this.onClearError,
    this.prefixText,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    const Color appBlueColor = Color(0xFF0205D3);
    const Color appYellowColor = Color(0xFFFFFDD0);

    final double fieldWidth = MediaQuery.of(context).size.width - 20;

    return Container(
      width: fieldWidth < 0 ? 0 : fieldWidth,
      height: 40,
      // Sombrinha vermelha se error == true
      decoration: error
          ? BoxDecoration(
              boxShadow: [
                BoxShadow(
                  color: Colors.redAccent.withOpacity(0.3),
                  blurRadius: 4,
                  offset: const Offset(0, 2),
                ),
              ],
            )
          : null,
      child: DropdownButtonFormField<String>(
        isDense: true,
        focusNode: focusNode,

        /// Se não há valor selecionado, esse `hint` aparece
        /// e aqui definimos explicitamente cor=preto (black).
        hint: Text(
          hintText,
          style: const TextStyle(
            fontWeight: FontWeight.bold,
            fontSize: 16,
            color: Colors.black,
          ),
        ),

        value: value,
        onChanged: (newValue) {
          if (error && onClearError != null) {
            onClearError!();
          }
          if (onChanged != null) {
            onChanged!(newValue);
          }
        },
        items: items.map((itemValue) {
          return DropdownMenuItem(
            value: itemValue,
            child: Text(itemValue),
          );
        }).toList(),

        /// Aqui configuramos a `InputDecoration` para ter label, borda etc.
        /// Mas NÃO use `hintText:` nela, pois vai conflitar com o hint do dropdown.
        decoration: InputDecoration(
          labelText: label,
          labelStyle: const TextStyle(
            fontWeight: FontWeight.bold,
            fontSize: 16,
            color: Colors.black,
          ),
          floatingLabelStyle: const TextStyle(
            fontWeight: FontWeight.bold,
            fontSize: 12,
            color: appBlueColor,
          ),
          // Removemos o hintText daqui para evitar conflito
          prefixText: prefixText,
          filled: true,
          fillColor: appYellowColor,
          enabledBorder: const OutlineInputBorder(
            borderSide: BorderSide(color: appBlueColor, width: 1),
          ),
          focusedBorder: const OutlineInputBorder(
            borderSide: BorderSide(color: appBlueColor, width: 2),
          ),
          border: const OutlineInputBorder(
            borderSide: BorderSide(color: appBlueColor, width: 1),
          ),
          errorText: error ? ' ' : null,
          errorStyle: const TextStyle(fontSize: 0, height: 0),
          contentPadding: const EdgeInsets.symmetric(
            horizontal: 12,
            vertical: 8,
          ),
        ),
      ),
    );
  }
}
import 'package:flutter/material.dart';

class CustomTextField extends StatelessWidget {
  final String labelText;
  final bool obscureText;

  const CustomTextField({
    Key? key,
    required this.labelText,
    this.obscureText = false,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return SizedBox(
      width: 320,
      height: 40,
      child: TextField(
        obscureText: obscureText,
        style: const TextStyle(
          fontSize: 18,
          fontWeight: FontWeight.w500,
          color: Color(0xFF3D3D3D),
        ),
        decoration: InputDecoration(
          labelText: labelText,
          labelStyle: const TextStyle(
            fontSize: 16,
            color: Color(0xFFB5B5B5),
          ),
          fillColor: const Color(0xFFFEFFE4),
          filled: true,
          contentPadding: const EdgeInsets.symmetric(vertical: 10, horizontal: 15),
          enabledBorder: OutlineInputBorder(
            borderSide: const BorderSide(
              color: Color(0xFF0C29AB),
              width: 2,
            ),
            borderRadius: BorderRadius.circular(5),
          ),
          focusedBorder: OutlineInputBorder(
            borderSide: const BorderSide(
              color: Color(0xFF0C29AB),
              width: 2,
            ),
            borderRadius: BorderRadius.circular(5),
          ),
        ),
      ),
    );
  }
}
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';

class TitleBox extends StatelessWidget {
  final String title;

  const TitleBox({
    Key? key,
    required this.title,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    // 20px menor que a largura total da tela
    final double boxWidth = MediaQuery.of(context).size.width - 20;

    return Container(
      // Define a largura dinamicamente
      width: boxWidth,
      height: 70, // Mantém a altura original
      alignment: Alignment.center,
      decoration: BoxDecoration(
        color: const Color(0xFF0205D3), // Fundo azul
        borderRadius: BorderRadius.circular(10),
      ),
      child: Text(
        title,
        textAlign: TextAlign.center,
        style: GoogleFonts.poppins(
          fontSize: 32,
          fontWeight: FontWeight.bold,
          color: Colors.white,
        ),
      ),
    );
  }
}
